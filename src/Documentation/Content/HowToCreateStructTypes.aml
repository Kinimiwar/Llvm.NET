<?xml version="1.0" encoding="utf-8"?>
<topic id="71ceaf97-cbf9-4d0d-8c1a-a7a1565d61dc" revisionNumber="1">
    <developerHowToDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

        <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

        <introduction>
            <para>
                Creating debug information for a type is a multi staged process in LLVM, while this library
                aims to make that simpler it can still be a bit daunting at first. This topic explains how to consturct
                a type with debug information.
            </para>
        </introduction>

        <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
        <procedure>
            <title>Creating debug types</title>
            <steps class="ordered">
                <step>
                    <content>
                        <para>Create a type with a temporary debug type declaration</para>
                    </content>
                </step>
                <step>
                    <content>
                        <para>Create an array of debug member descriptions</para>
                    </content>
                </step>
                <step>
                    <content>
                        <para>Set the types method body</para>
                    </content>
                </step>
            </steps>
            <!-- <conclusion>Optional conclusion</conclusion> -->
        </procedure>

        <!-- <codeExample>Optional code example</codeExample> -->

        <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

        <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

        <!-- <security>Optional discussion of security issues.</security> -->

        <relatedTopics>
            <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
        </relatedTopics>
    </developerHowToDocument>
</topic>
