<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Llvm.NET</name>
  </assembly>
  <members>
    <member name="T:Llvm.NET.AttributeKind">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.AttributeKind</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.AttributeKind.None"></member>
    <member name="F:Llvm.NET.AttributeKind.Alignment"></member>
    <member name="F:Llvm.NET.AttributeKind.AlwaysInline"></member>
    <member name="F:Llvm.NET.AttributeKind.Builtin"></member>
    <member name="F:Llvm.NET.AttributeKind.ByVal"></member>
    <member name="F:Llvm.NET.AttributeKind.InAlloca"></member>
    <member name="F:Llvm.NET.AttributeKind.Cold"></member>
    <member name="F:Llvm.NET.AttributeKind.Convergent"></member>
    <member name="F:Llvm.NET.AttributeKind.InlineHint"></member>
    <member name="F:Llvm.NET.AttributeKind.InReg"></member>
    <member name="F:Llvm.NET.AttributeKind.JumpTable"></member>
    <member name="F:Llvm.NET.AttributeKind.MinSize"></member>
    <member name="F:Llvm.NET.AttributeKind.Naked"></member>
    <member name="F:Llvm.NET.AttributeKind.Nest"></member>
    <member name="F:Llvm.NET.AttributeKind.NoAlias"></member>
    <member name="F:Llvm.NET.AttributeKind.NoBuiltin"></member>
    <member name="F:Llvm.NET.AttributeKind.NoCapture"></member>
    <member name="F:Llvm.NET.AttributeKind.NoDuplicate"></member>
    <member name="F:Llvm.NET.AttributeKind.NoImplicitFloat"></member>
    <member name="F:Llvm.NET.AttributeKind.NoInline"></member>
    <member name="F:Llvm.NET.AttributeKind.NonLazyBind"></member>
    <member name="F:Llvm.NET.AttributeKind.NonNull"></member>
    <member name="F:Llvm.NET.AttributeKind.Dereferenceable"></member>
    <member name="F:Llvm.NET.AttributeKind.DereferenceableOrNull"></member>
    <member name="F:Llvm.NET.AttributeKind.NoRedZone"></member>
    <member name="F:Llvm.NET.AttributeKind.NoReturn"></member>
    <member name="F:Llvm.NET.AttributeKind.NoUnwind"></member>
    <member name="F:Llvm.NET.AttributeKind.OptimizeForSize"></member>
    <member name="F:Llvm.NET.AttributeKind.OptimizeNone"></member>
    <member name="F:Llvm.NET.AttributeKind.ReadNone"></member>
    <member name="F:Llvm.NET.AttributeKind.ReadOnly"></member>
    <member name="F:Llvm.NET.AttributeKind.ArgMemOnly"></member>
    <member name="F:Llvm.NET.AttributeKind.Returned"></member>
    <member name="F:Llvm.NET.AttributeKind.ReturnsTwice"></member>
    <member name="F:Llvm.NET.AttributeKind.SExt"></member>
    <member name="F:Llvm.NET.AttributeKind.StackAlignment"></member>
    <member name="F:Llvm.NET.AttributeKind.StackProtect"></member>
    <member name="F:Llvm.NET.AttributeKind.StackProtectReq"></member>
    <member name="F:Llvm.NET.AttributeKind.StackProtectStrong"></member>
    <member name="F:Llvm.NET.AttributeKind.SafeStack"></member>
    <member name="F:Llvm.NET.AttributeKind.StructRet"></member>
    <member name="F:Llvm.NET.AttributeKind.SanitizeAddress"></member>
    <member name="F:Llvm.NET.AttributeKind.SanitizeThread"></member>
    <member name="F:Llvm.NET.AttributeKind.SanitizeMemory"></member>
    <member name="F:Llvm.NET.AttributeKind.UWTable"></member>
    <member name="F:Llvm.NET.AttributeKind.ZExt"></member>
    <member name="T:Llvm.NET.ByteOrdering">
      <summary>Byte ordering for target code generation and data type layout</summary>
    </member>
    <member name="F:Llvm.NET.ByteOrdering.LittleEndian"></member>
    <member name="F:Llvm.NET.ByteOrdering.BigEndian"></member>
    <member name="T:Llvm.NET.CallingConvention">
      <summary>Calling Convention for functions</summary>
    </member>
    <member name="F:Llvm.NET.CallingConvention.C"></member>
    <member name="F:Llvm.NET.CallingConvention.FastCall"></member>
    <member name="F:Llvm.NET.CallingConvention.ColdCall"></member>
    <member name="F:Llvm.NET.CallingConvention.WebKitJS"></member>
    <member name="F:Llvm.NET.CallingConvention.AnyReg"></member>
    <member name="F:Llvm.NET.CallingConvention.x86StdCall"></member>
    <member name="F:Llvm.NET.CallingConvention.x86FastCall"></member>
    <member name="T:Llvm.NET.CodeGenFileType">
      <summary>Output file type for target code generation</summary>
    </member>
    <member name="F:Llvm.NET.CodeGenFileType.AssemblySource"></member>
    <member name="F:Llvm.NET.CodeGenFileType.ObjectFile"></member>
    <member name="T:Llvm.NET.CodeGenOpt">
      <summary>Optimization level for target code generation</summary>
    </member>
    <member name="F:Llvm.NET.CodeGenOpt.None"></member>
    <member name="F:Llvm.NET.CodeGenOpt.Less"></member>
    <member name="F:Llvm.NET.CodeGenOpt.Default"></member>
    <member name="F:Llvm.NET.CodeGenOpt.Aggressive"></member>
    <member name="T:Llvm.NET.CodeModel">
      <summary>Code model to use for target code generation</summary>
    </member>
    <member name="F:Llvm.NET.CodeModel.Default"></member>
    <member name="F:Llvm.NET.CodeModel.JitDefault"></member>
    <member name="F:Llvm.NET.CodeModel.Small"></member>
    <member name="F:Llvm.NET.CodeModel.Kernel"></member>
    <member name="F:Llvm.NET.CodeModel.Medium"></member>
    <member name="F:Llvm.NET.CodeModel.Large"></member>
    <member name="T:Llvm.NET.Context">
      <summary>Encapsulates an LLVM context</summary>
    </member>
    <member name="M:Llvm.NET.Context.#ctor">
      <summary>Creates a new context</summary>
    </member>
    <member name="P:Llvm.NET.Context.BoolType">
      <summary>Get's the LLVM boolean type for this context</summary>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(Llvm.NET.Types.ITypeRef,System.UInt64,System.Boolean)">
      <summary>Create a constant value of the specified integer type</summary>
      <param name="intType">Integer type</param>
      <param name="constValue">value</param>
      <param name="signExtend">flag to indicate if <paramref name="constValue" /> is sign extended</param>
      <returns>Constant for the specifiec value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Boolean)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 1</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Byte)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 8</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Double)">
      <summary>Creates a constant floating point value for a given value</summary>
      <param name="constValue">Value to make into a <see cref="T:Llvm.NET.Values.ConstantFP" /></param>
      <returns>Constant value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Int16)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 16</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Int32)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 32</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Int64)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 64</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.SByte)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 8</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.Single)">
      <summary>Creates a constant floating point value for a given value</summary>
      <param name="constValue">Value to make into a <see cref="T:Llvm.NET.Values.ConstantFP" /></param>
      <returns>Constant value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.UInt16)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 16</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.UInt32)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 32</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.UInt32,System.UInt64,System.Boolean)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 64</summary>
      <param name="bitWidth">Bit width of the integer</param>
      <param name="constValue">Value for the constant</param>
      <param name="signExtend">flag to indicate if the const value should be sign extended</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstant(System.UInt64)">
      <summary>Creates a new <see cref="T:Llvm.NET.Values.ConstantInt" /> with a bit length of 64</summary>
      <param name="constValue">Value for the constant</param>
      <returns>
        <see cref="T:Llvm.NET.Values.ConstantInt" /> representing the value</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstantString(System.String)">
      <summary>Create a constant data string value</summary>
      <param name="value">string to convert into an LLVM constant value</param>
      <returns>new <see cref="T:Llvm.NET.Values.ConstantDataArray" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstantString(System.String,System.Boolean)">
      <summary>Create a constant data string value</summary>
      <param name="value">string to convert into an LLVM constant value</param>
      <param name="nullTerminate">flag to indicate if the string should include a null terminator</param>
      <returns>new <see cref="T:Llvm.NET.Values.ConstantDataArray" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstantStruct(System.Boolean,Llvm.NET.Values.Constant[])">
      <summary>Creates a constant structure from a set of values</summary>
      <param name="packed">Flag to indicate if the structure is packed and no alignment should be applied to the members</param>
      <param name="values">Set of values to use in forming the structure</param>
      <returns>Newly created <see cref="T:Llvm.NET.Values.Constant" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateConstantStruct(System.Boolean,System.Collections.Generic.IEnumerable{Llvm.NET.Values.Constant})">
      <summary>Creates a constant structure from a set of values</summary>
      <param name="values">Set of values to use in forming the structure</param>
      <param name="packed">Flag to indicate if the structure is packed and no alignment should be applied to the members</param>
      <returns>Newly created <see cref="T:Llvm.NET.Values.Constant" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateFunctionType(Llvm.NET.DebugInfo.DebugInfoBuilder,Llvm.NET.DebugInfo.DIFile,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType}[])">
      <summary>Creates a FunctionType with Debug information</summary>
      <param name="diBuilder">
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoBuilder" />to use to create the debug information</param>
      <param name="diFile">
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> that contains the function</param>
      <param name="retType">Return type of the function</param>
      <param name="argTypes">Argument types of the function</param>
      <returns>Function signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateFunctionType(Llvm.NET.DebugInfo.DebugInfoBuilder,Llvm.NET.DebugInfo.DIFile,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType}})">
      <summary>Creates a FunctionType with Debug information</summary>
      <param name="diBuilder">
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoBuilder" />to use to create the debug information</param>
      <param name="diFile">
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> that contains the function</param>
      <param name="retType">Return type of the function</param>
      <param name="argTypes">Argument types of the function</param>
      <returns>Function signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateFunctionType(Llvm.NET.DebugInfo.DebugInfoBuilder,Llvm.NET.DebugInfo.DIFile,System.Boolean,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType}[])">
      <summary>Creates a FunctionType with Debug information</summary>
      <param name="diBuilder">
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoBuilder" />to use to create the debug information</param>
      <param name="diFile">
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> that contains the function</param>
      <param name="isVarArg">Flag to indicate if this function is variadic</param>
      <param name="retType">Return type of the function</param>
      <param name="argTypes">Argument types of the function</param>
      <returns>Function signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateFunctionType(Llvm.NET.DebugInfo.DebugInfoBuilder,Llvm.NET.DebugInfo.DIFile,System.Boolean,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType}})">
      <summary>Creates a FunctionType with Debug information</summary>
      <param name="diBuilder">
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoBuilder" />to use to create the debug information</param>
      <param name="diFile">
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> that contains the function</param>
      <param name="isVarArg">Flag to indicate if this function is variadic</param>
      <param name="retType">Return type of the function</param>
      <param name="argTypes">Argument types of the function</param>
      <returns>Function signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateMetadataString(System.String)">
      <summary>Creates a metadata string from the given string</summary>
      <param name="value">string to create as metadata</param>
      <returns>new metadata string</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateNamedConstantStruct(Llvm.NET.Types.IStructType,Llvm.NET.Values.Constant[])">
      <summary>Creates a constant instance of a specified structure type from a set of values</summary>
      <param name="type">Type of the structure to create</param>
      <param name="values">Set of values to use in forming the structure</param>
      <returns>Newly created <see cref="T:Llvm.NET.Values.Constant" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateNamedConstantStruct(Llvm.NET.Types.IStructType,System.Collections.Generic.IEnumerable{Llvm.NET.Values.Constant})">
      <summary>Creates a constant instance of a specified structure type from a set of values</summary>
      <param name="type">Type of the structure to create</param>
      <param name="values">Set of values to use in forming the structure</param>
      <returns>Newly created <see cref="T:Llvm.NET.Values.Constant" /></returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateStructType(System.Boolean,Llvm.NET.Types.ITypeRef,Llvm.NET.Types.ITypeRef[])">
      <summary>Create an anonymous structure type (e.g. Tuple)</summary>
      <param name="packed">Flag to indicate if the structure is "packed"</param>
      <param name="element0">Type of the first field of the structure</param>
      <param name="elements">Types of any additional fields of the structure</param>
      <returns>
        <see cref="T:Llvm.NET.Types.IStructType" /> with the specified body defined.
            </returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateStructType(System.String)">
      <summary>Create an empty structure type</summary>
      <param name="name">Name of the type</param>
      <returns>New type</returns>
    </member>
    <member name="M:Llvm.NET.Context.CreateStructType(System.String,System.Boolean,Llvm.NET.Types.ITypeRef[])">
      <summary>Creates a new structure type in this <see cref="T:Llvm.NET.Context" /></summary>
      <param name="name">Name of the structure</param>
      <param name="packed">Flag indicating if the structure is packed</param>
      <param name="elements">Types for the structures elements in layout order</param>
      <returns>
        <see cref="T:Llvm.NET.Types.IStructType" /> with the specified body defined.
            </returns>
    </member>
    <member name="M:Llvm.NET.Context.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.Context</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Context.DoubleType">
      <summary>Get's the LLVM double precision floating point type for this context</summary>
    </member>
    <member name="M:Llvm.NET.Context.Finalize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Context.Finalize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Context.FloatType">
      <summary>Get's the LLVM single precision floating point type for this context</summary>
    </member>
    <member name="M:Llvm.NET.Context.GetFunctionType(Llvm.NET.Types.ITypeRef,Llvm.NET.Types.ITypeRef[])">
      <summary>Get an LLVM Function type (e.g. signature)</summary>
      <param name="returnType">Return type of the function</param>
      <param name="args">Optional set of function argument types</param>
      <returns>Signature type for the specified signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.GetFunctionType(Llvm.NET.Types.ITypeRef,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef})">
      <summary>Get an LLVM Function type (e.g. signature)</summary>
      <param name="returnType">Return type of the function</param>
      <param name="args">Potentially empty set of function argument types</param>
      <returns>Signature type for the specified signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.GetFunctionType(Llvm.NET.Types.ITypeRef,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Boolean)">
      <summary>Get an LLVM Function type (e.g. signature)</summary>
      <param name="returnType">Return type of the function</param>
      <param name="args">Potentially empty set of function argument types</param>
      <param name="isVarArgs">Flag to indicate if the method supports C/C++ style VarArgs</param>
      <returns>Signature type for the specified signature</returns>
    </member>
    <member name="M:Llvm.NET.Context.GetIntType(System.UInt32)">
      <summary>Get's an LLVM integer type of arbitrary bit width</summary>
      <param name="bitWidth">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitWidth</parameter>
            <parameter>M:Llvm.NET.Context.GetIntType(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Context.GetIntType(System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Context.GetPointerTypeFor(Llvm.NET.Types.ITypeRef)">
      <summary>Get a type that is a pointer to a value of a given type</summary>
      <param name="elementType">Type of value the pointer points to</param>
      <returns>
        <see cref="T:Llvm.NET.Types.IPointerType" /> for a pointer that references a value of type <paramref name="elementType" /></returns>
    </member>
    <member name="P:Llvm.NET.Context.HalfFloatType">
      <summary>Get's the LLVM half precision floating point type for this context</summary>
    </member>
    <member name="P:Llvm.NET.Context.Int16Type">
      <summary>Get's the LLVM 16 bit integer type for this context</summary>
    </member>
    <member name="P:Llvm.NET.Context.Int32Type">
      <summary>Get's the LLVM 32 bit integer type for this context</summary>
    </member>
    <member name="P:Llvm.NET.Context.Int64Type">
      <summary>Get's the LLVM 64 bit integer type for this context</summary>
    </member>
    <member name="P:Llvm.NET.Context.Int8Type">
      <summary>Get's the LLVM 8 bit integer type for this context</summary>
    </member>
    <member name="P:Llvm.NET.Context.IsDisposed">
      <summary>Flag to indicate if this instance is still valid</summary>
    </member>
    <member name="P:Llvm.NET.Context.VoidType">
      <summary>Get's the LLVM void type for this context</summary>
    </member>
    <member name="T:Llvm.NET.ExtensiblePropertyDescriptor`1">
      <summary>Provides consistent accessors for an extended property</summary>
      <typeparam name="T">Type of values stored in the property</typeparam>
    </member>
    <member name="M:Llvm.NET.ExtensiblePropertyDescriptor`1.#ctor(System.String)">
      <summary>Creates a new instance of a property descriptor</summary>
      <param name="name">Name of the pextended property</param>
    </member>
    <member name="M:Llvm.NET.ExtensiblePropertyDescriptor`1.GetValueFrom(Llvm.NET.IExtensiblePropertyContainer)">
      <summary>Gets a value for the property from the container</summary>
      <param name="container">container</param>
      <returns>Value retrieved from the property or the default value of type <typeparamref name="T" /></returns>
    </member>
    <member name="M:Llvm.NET.ExtensiblePropertyDescriptor`1.GetValueFrom(Llvm.NET.IExtensiblePropertyContainer,System.Func{`0})">
      <summary>Gets a value for the property from the container</summary>
      <param name="container">container</param>
      <param name="lazyDefaultFactory">default value factory delegate to create the default value if the value is not yet present as an extended property</param>
      <returns>Value retrieved from the property or default value created by <paramref name="lazyDefaultFactory" /> if it wasn't found</returns>
    </member>
    <member name="M:Llvm.NET.ExtensiblePropertyDescriptor`1.GetValueFrom(Llvm.NET.IExtensiblePropertyContainer,`0)">
      <summary>Gets a value for the property from the container</summary>
      <param name="container">container</param>
      <param name="defaultValue">default value if the value is not yet present as an extended property</param>
      <returns>Value retrieved from the property or <paramref name="defaultValue" /> if it wasn't found</returns>
    </member>
    <member name="P:Llvm.NET.ExtensiblePropertyDescriptor`1.Name">
      <summary>Name of the property</summary>
    </member>
    <member name="M:Llvm.NET.ExtensiblePropertyDescriptor`1.SetValueIn(Llvm.NET.IExtensiblePropertyContainer,`0)">
      <summary>Sets the value of an extended property in a container</summary>
      <param name="container">Container to set the value in</param>
      <param name="value">value of the property</param>
    </member>
    <member name="T:Llvm.NET.FunctionAttributeIndex">
      <summary>Function index for attributes</summary>
    </member>
    <member name="F:Llvm.NET.FunctionAttributeIndex.Function">
      <summary>The attribute applies to the function itself</summary>
    </member>
    <member name="F:Llvm.NET.FunctionAttributeIndex.ReturnType">
      <summary>The attribute applies to the return type of the function</summary>
    </member>
    <member name="F:Llvm.NET.FunctionAttributeIndex.Parameter0">
      <summary>The attribute applies to the first paramter of the function</summary>
    </member>
    <member name="T:Llvm.NET.GlobalPassRegistry">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.GlobalPassRegistry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeAll">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeAll</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeAnalysis">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeAnalysis</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeCodeGen">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeCodeGen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeCore">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeCore</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeInstCombine">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeInstCombine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeInstrumentation">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeInstrumentation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeIPA">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeIPA</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeIPO">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeIPO</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeObjCARCOpts">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeObjCARCOpts</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeScalarOpts">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeScalarOpts</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeTarget">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeTarget</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeTransformUtils">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeTransformUtils</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.GlobalPassRegistry.InitializeVectorization">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.GlobalPassRegistry.InitializeVectorization</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.IExtensiblePropertyContainer">
      <summary>Interface to allow adding arbitrary named data items to an object</summary>
    </member>
    <member name="M:Llvm.NET.IExtensiblePropertyContainer.AddExtendedPropertyValue(System.String,System.Object)">
      <summary>Adds a value to the container</summary>
      <param name="id">Id of the value</param>
      <param name="value">value to add</param>
    </member>
    <member name="M:Llvm.NET.IExtensiblePropertyContainer.TryGetExtendedPropertyValue``1(System.String,``0@)">
      <summary>Try to get a value from the container</summary>
      <param name="id">id of the value to retrieve</param>
      <param name="value">value retrieved if present (or default value of type <typeparamref name="T" /> otherwise)</param>
      <typeparam name="T">Type of value to retrieve</typeparam>
      <returns>
            true if the item was found and it's type matches <typeparamref name="T" /> false otherwise.
            </returns>
    </member>
    <member name="T:Llvm.NET.InstructionBuilder">
      <summary>LLVM Instruction builder allowing managed code to generate IR instructions</summary>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.#ctor(Llvm.NET.Context)">
      <summary>Creates an <see cref="T:Llvm.NET.InstructionBuilder" /> for a given context</summary>
      <param name="context">Context used for creating instructions</param>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.#ctor(Llvm.NET.Values.BasicBlock)">
      <summary>Creates an <see cref="T:Llvm.NET.InstructionBuilder" /> for a <see cref="T:Llvm.NET.Values.BasicBlock" /></summary>
      <param name="block">Block this builder is initially attached to</param>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Add(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Add(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Add(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Add(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Add(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="typeRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>typeRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.ConstantInt)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.ConstantInt)</parameter>
          </include>
        </markup>
      </summary>
      <param name="typeRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>typeRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.ConstantInt)</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.ConstantInt)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Alloca(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.ConstantInt)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.And(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.And(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.And(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.And(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.And(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ArithmeticShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ArithmeticShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ArithmeticShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ArithmeticShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ArithmeticShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.BitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.BitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.BitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.BitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.BitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="target">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>target</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="ifCondition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>ifCondition</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="thenTarget">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>thenTarget</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="elseTarget">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elseTarget</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Branch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="func">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>func</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,System.Collections.Generic.IReadOnlyList{Llvm.NET.Values.Value})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,System.Collections.Generic.IReadOnlyList{Llvm.NET.Values.Value})</parameter>
          </include>
        </markup>
      </summary>
      <param name="func">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>func</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,System.Collections.Generic.IReadOnlyList{Llvm.NET.Values.Value})</parameter>
          </include>
        </markup>
      </param>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,System.Collections.Generic.IReadOnlyList{Llvm.NET.Values.Value})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Call(Llvm.NET.Values.Value,System.Collections.Generic.IReadOnlyList{Llvm.NET.Values.Value})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Compare(Llvm.NET.IntPredicate,Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>Builds an Integer compare instruction</summary>
      <param name="predicate">Integer predicate for the comparison</param>
      <param name="lhs">Left hand side of the comparison</param>
      <param name="rhs">Right hand side of the comparison</param>
      <returns>Comparison instruction</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Compare(Llvm.NET.Predicate,Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>Builds a compare instruction</summary>
      <param name="predicate">predicate for the comparison</param>
      <param name="lhs">Left hand side of the comparison</param>
      <param name="rhs">Right hand side of the comparison</param>
      <returns>Comparison instruction</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Compare(Llvm.NET.RealPredicate,Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>Builds a Floating point compare instruction</summary>
      <param name="predicate">predicate for the comparison</param>
      <param name="lhs">Left hand side of the comparison</param>
      <param name="rhs">Right hand side of the comparison</param>
      <returns>Comparison instruction</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ConstGetElementPtrInBounds(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])">
      <summary>Creates a <see cref="T:Llvm.NET.Values.User" /> that accesses an element of a type referenced by a pointer</summary>
      <param name="pointer">pointer to get an element from</param>
      <param name="args">additional indeces for computing the resulting pointer</param>
      <returns>
        <para>
          <see cref="T:Llvm.NET.Values.User" /> for the member access. This is a User as LLVM may 
            optimize the expression to a <see cref="T:Llvm.NET.Values.ConstantExpression" /> if it 
            can so the actual type of the result may be <see cref="T:Llvm.NET.Values.ConstantExpression" />
            or <see cref="T:Llvm.NET.Instructions.GetElementPtr" />.</para>
        <para>Note that <paramref name="pointer" /> must be a pointer to a structure
            or an excpetion is thrown.</para>
      </returns>
    </member>
    <member name="P:Llvm.NET.InstructionBuilder.Context">
      <summary>Gets the context this builder is creating instructions for</summary>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.DebugTrap(Llvm.NET.Module)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DebugTrap(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DebugTrap(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DebugTrap(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.InstructionBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Llvm.NET.InstructionBuilder</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Llvm.NET.InstructionBuilder</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.DoNothing(Llvm.NET.Module)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DoNothing(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DoNothing(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.DoNothing(Llvm.NET.Module)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ExtractValue(Llvm.NET.Values.Value,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ExtractValue(Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="instance">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>instance</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ExtractValue(Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ExtractValue(Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ExtractValue(Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FAdd(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FAdd(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FAdd(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FAdd(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FAdd(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Finalize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Finalize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FMul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FMul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FMul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FMul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FMul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FNeg(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FNeg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FNeg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FNeg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FPExt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPExt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPExt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="toType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPExt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPExt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FPToUICast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPToUICast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPToUICast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPToUICast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FPToUICast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.FSub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FSub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FSub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FSub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.FSub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.GetElementPtr(Llvm.NET.Values.Value,System.Collections.Generic.IEnumerable{Llvm.NET.Values.Value})">
      <summary>Creates a <see cref="T:Llvm.NET.Values.User" /> that accesses an element of a type referenced by a pointer</summary>
      <param name="pointer">pointer to get an element from</param>
      <param name="args">additional indeces for computing the resulting pointer</param>
      <returns>
        <para>
          <see cref="T:Llvm.NET.Values.User" /> for the member access. This is a User as LLVM may 
            optimize the expression to a <see cref="T:Llvm.NET.Values.ConstantExpression" /> if it 
            can so the actual type of the result may be <see cref="T:Llvm.NET.Values.ConstantExpression" />
            or <see cref="T:Llvm.NET.Instructions.GetElementPtr" />.</para>
        <para>Note that <paramref name="pointer" /> must be a pointer to a structure
            or an excpetion is thrown.</para>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.GetElementPtrInBounds(Llvm.NET.Values.Value,Llvm.NET.Values.Value[])">
      <summary>Creates a <see cref="T:Llvm.NET.Values.User" /> that accesses an element of a type referenced by a pointer</summary>
      <param name="pointer">pointer to get an element from</param>
      <param name="args">additional indeces for computing the resulting pointer</param>
      <returns>
        <para>
          <see cref="T:Llvm.NET.Values.User" /> for the member access. This is a User as LLVM may 
            optimize the expression to a <see cref="T:Llvm.NET.Values.ConstantExpression" /> if it 
            can so the actual type of the result may be <see cref="T:Llvm.NET.Values.ConstantExpression" />
            or <see cref="T:Llvm.NET.Instructions.GetElementPtr" />.</para>
        <para>Note that <paramref name="pointer" /> must be a pointer to a structure
            or an excpetion is thrown.</para>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.GetElementPtrInBounds(Llvm.NET.Values.Value,System.Collections.Generic.IEnumerable{Llvm.NET.Values.Value})">
      <summary>Creates a <see cref="T:Llvm.NET.Values.User" /> that accesses an element of a type referenced by a pointer</summary>
      <param name="pointer">pointer to get an element from</param>
      <param name="args">additional indeces for computing the resulting pointer</param>
      <returns>
        <para>
          <see cref="T:Llvm.NET.Values.User" /> for the member access. This is a User as LLVM may 
            optimize the expression to a <see cref="T:Llvm.NET.Values.ConstantExpression" /> if it 
            can so the actual type of the result may be <see cref="T:Llvm.NET.Values.ConstantExpression" />
            or <see cref="T:Llvm.NET.Instructions.GetElementPtr" />.</para>
        <para>Note that <paramref name="pointer" /> must be a pointer to a structure
            or an excpetion is thrown.</para>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.GetStructElementPointer(Llvm.NET.Values.Value,System.UInt32)">
      <summary>Creates a <see cref="T:Llvm.NET.Values.Value" /> that accesses an element (field) of a structure</summary>
      <param name="pointer">pointer to the strucure to get an element from</param>
      <param name="index">element index</param>
      <returns>
        <para>
          <see cref="T:Llvm.NET.Values.Value" /> for the member access. This is a User as LLVM may 
            optimize the expression to a <see cref="T:Llvm.NET.Values.ConstantExpression" /> if it 
            can so the actual type of the result may be <see cref="T:Llvm.NET.Values.ConstantExpression" />
            or <see cref="T:Llvm.NET.Instructions.GetElementPtr" />.</para>
        <para>Note that <paramref name="pointer" /> must be a pointer to a structure
            or an excpetion is thrown.</para>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="aggValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aggValue</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="elementValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementValue</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.InsertValue(Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isSigned">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isSigned</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.IntCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.IntToPointer(Llvm.NET.Values.Value,Llvm.NET.Types.IPointerType)">
      <summary>Builds a cast from an integer to a pointer</summary>
      <param name="intValue">Integer value to cast</param>
      <param name="ptrType">pointer type to return</param>
      <returns>Resulting value from the cast</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Load(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Load(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="sourcePtr">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourcePtr</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Load(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Load(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.LogicalShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.LogicalShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.LogicalShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.LogicalShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.LogicalShiftRight(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.MemCpy(Llvm.NET.Module,Llvm.NET.Values.Value,Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.Int32,System.Boolean)">
      <summary>Builds a memcpy intrinsic call</summary>
      <param name="module">Module to add the declaration of the intrinsic to if it doesn't already exist</param>
      <param name="destination">Destination pointer of the memcpy</param>
      <param name="source">Source pointer of the memcpy</param>
      <param name="len">length of the data to copy</param>
      <param name="align">Alignment of the data for the copy</param>
      <param name="isVolatile">Flag to indicate if the copy invovles volatile data such as physical registers</param>
      <returns>
        <see cref="T:Llvm.NET.Instructions.Intrinsic" /> call for the memcpy</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.MemMove(Llvm.NET.Module,Llvm.NET.Values.Value,Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.Int32,System.Boolean)">
      <summary>Builds a memmov intrinsic call</summary>
      <param name="module">Module to add the declaration of the intrinsic to if it doesn't already exist</param>
      <param name="destination">Destination pointer of the memcpy</param>
      <param name="source">Source pointer of the memcpy</param>
      <param name="len">length of the data to copy</param>
      <param name="align">Alignment of the data for the copy</param>
      <param name="isVolatile">Flag to indicate if the copy invovles volatile data such as physical registers</param>
      <returns>
        <see cref="T:Llvm.NET.Instructions.Intrinsic" /> call for the memcpy</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.MemSet(Llvm.NET.Module,Llvm.NET.Values.Value,Llvm.NET.Values.Value,Llvm.NET.Values.Value,System.Int32,System.Boolean)">
      <summary>Builds a memset intrinsic call</summary>
      <param name="module">Module to add the declaration of the intrinsic to if it doesn't already exist</param>
      <param name="destination">Destination pointer of the memset</param>
      <param name="value">fill value for the memset</param>
      <param name="len">length of the data to fill</param>
      <param name="align">ALignment of the data for the fill</param>
      <param name="isVolatile">Flag to indicate if the fill invovles volatile data such as physical registers</param>
      <returns>
        <see cref="T:Llvm.NET.Instructions.Intrinsic" /> call for the memcpy</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Mul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Mul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Mul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Mul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Mul(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Neg(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Neg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Neg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Neg(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Not(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Not(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Not(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Not(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Or(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Or(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Or(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Or(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Or(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.PhiNode(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.PhiNode(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="resultType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>resultType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.PhiNode(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.PhiNode(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.PointerToInt(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>Builds a cast from a pointer to an integer type</summary>
      <param name="ptrValue">Pointer value to cast</param>
      <param name="intType">Integer type to return</param>
      <returns>Resulting value from the cast</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.PositionAtEnd(Llvm.NET.Values.BasicBlock)">
      <summary>Positions the builder at the end of a given <see cref="T:Llvm.NET.Values.BasicBlock" /></summary>
      <param name="basicBlock"></param>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.PositionBefore(Llvm.NET.Instructions.Instruction)">
      <summary>Positions the builder before the given instruction</summary>
      <param name="instr">Instruction to position the builder before</param>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Return">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Return</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Return</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Return(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Return(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Return(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Return(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.SDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ShiftLeft(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ShiftLeft(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ShiftLeft(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ShiftLeft(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ShiftLeft(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.SignExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.SignExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SignExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.SIToFPCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SIToFPCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SIToFPCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SIToFPCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SIToFPCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.SRem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SRem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SRem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SRem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.SRem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Store(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>Builds an LLVM Store instruction</summary>
      <param name="value">Value to store in destination</param>
      <param name="destination">value for the destination</param>
      <returns>
        <see cref="T:Llvm.NET.Instructions.Store" /> instruction</returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Sub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Sub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Sub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Sub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Sub(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="defaultCase">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultCase</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="numCases">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>numCases</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Switch(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Trunc(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Trunc(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Trunc(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Trunc(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Trunc(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.TruncOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.TruncOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.TruncOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.TruncOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.TruncOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.UDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.UDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.UDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.UDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.UDiv(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.URem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.URem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.URem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.URem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.URem(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.Xor(Llvm.NET.Values.Value,Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Xor(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Xor(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <param name="rhs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rhs</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Xor(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.Xor(Llvm.NET.Values.Value,Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ZeroExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtend(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.InstructionBuilder.ZeroExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="valueRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>valueRef</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetType</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.InstructionBuilder.ZeroExtendOrBitCast(Llvm.NET.Values.Value,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.InternalCodeGeneratorException">
      <summary>Exception generated when the internal state of the code generation cannot proceed due to an internal error</summary>
    </member>
    <member name="M:Llvm.NET.InternalCodeGeneratorException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.InternalCodeGeneratorException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.InternalCodeGeneratorException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.InternalCodeGeneratorException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.String,System.Exception)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.InternalCodeGeneratorException</parameter>
          </include>
        </markup>
      </summary>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
      <param name="inner">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inner</parameter>
            <parameter>M:Llvm.NET.InternalCodeGeneratorException.#ctor(System.String,System.Exception)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Llvm.NET.IntPredicate">
      <summary>Predicate enumeration for integer comparison</summary>
    </member>
    <member name="F:Llvm.NET.IntPredicate.Equal"></member>
    <member name="F:Llvm.NET.IntPredicate.NotEqual"></member>
    <member name="F:Llvm.NET.IntPredicate.UnsignedGreater"></member>
    <member name="F:Llvm.NET.IntPredicate.UnsignedGreaterOrEqual"></member>
    <member name="F:Llvm.NET.IntPredicate.UnsignedLess"></member>
    <member name="F:Llvm.NET.IntPredicate.UnsignedLessOrEqual"></member>
    <member name="F:Llvm.NET.IntPredicate.SignedGreater"></member>
    <member name="F:Llvm.NET.IntPredicate.SignedGreaterOrEqual"></member>
    <member name="F:Llvm.NET.IntPredicate.SignedLess"></member>
    <member name="F:Llvm.NET.IntPredicate.SignedLessOrEqual"></member>
    <member name="T:Llvm.NET.Linkage">
      <summary>Linkage specification for functions and globals</summary>
    </member>
    <member name="F:Llvm.NET.Linkage.External"></member>
    <member name="F:Llvm.NET.Linkage.AvailableExternally"></member>
    <member name="F:Llvm.NET.Linkage.LinkOnceAny"></member>
    <member name="F:Llvm.NET.Linkage.LinkOnceODR"></member>
    <member name="F:Llvm.NET.Linkage.Weak"></member>
    <member name="F:Llvm.NET.Linkage.WeakODR"></member>
    <member name="F:Llvm.NET.Linkage.Append"></member>
    <member name="F:Llvm.NET.Linkage.Internal"></member>
    <member name="F:Llvm.NET.Linkage.Private"></member>
    <member name="F:Llvm.NET.Linkage.DllImport"></member>
    <member name="F:Llvm.NET.Linkage.DllExport"></member>
    <member name="F:Llvm.NET.Linkage.ExternalWeak"></member>
    <member name="F:Llvm.NET.Linkage.Common"></member>
    <member name="F:Llvm.NET.Linkage.LinkerPrivate"></member>
    <member name="F:Llvm.NET.Linkage.LinkerPrivateWeak"></member>
    <member name="T:Llvm.NET.LinkerMode">
      <summary>LLVM module linker mode</summary>
    </member>
    <member name="F:Llvm.NET.LinkerMode.DestroySource"></member>
    <member name="F:Llvm.NET.LinkerMode.PreserveSource"></member>
    <member name="T:Llvm.NET.MDNode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.MDNode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.MDNode.IsResolved">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.MDNode.IsResolved</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.MDNode.IsTemporary">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.MDNode.IsTemporary</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.MDNode.ReplaceAllUsesWith(Llvm.NET.Metadata)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.MDNode.ReplaceAllUsesWith(Llvm.NET.Metadata)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:Llvm.NET.MDNode.ReplaceAllUsesWith(Llvm.NET.Metadata)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.MDNode.ResolveCycles">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.MDNode.ResolveCycles</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.MDString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.MDString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.MDString.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.MDString.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.MDString.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.MemoryBuffer">
      <summary>LLVM MemoryBuffer</summary>
    </member>
    <member name="M:Llvm.NET.MemoryBuffer.#ctor(System.String)">
      <summary>Load a file as an LLVM Memory Buffer</summary>
      <param name="path">Path of the file to load into a <see cref="T:Llvm.NET.MemoryBuffer" /></param>
    </member>
    <member name="M:Llvm.NET.MemoryBuffer.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.MemoryBuffer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Metadata">
      <summary>Root of the LLVM Metadata hierarchy</summary>
    </member>
    <member name="M:Llvm.NET.Metadata.ReplaceAllUsesWith(Llvm.NET.Metadata)">
      <summary>Replace all uses of this descriptor with another</summary>
      <param name="other">New descriptor to replace this one with</param>
    </member>
    <member name="T:Llvm.NET.MetadataAsValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.MetadataAsValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.MetadataAsValue.op_Implicit(Llvm.NET.MetadataAsValue)~Llvm.NET.Metadata">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.MetadataAsValue.op_Implicit(Llvm.NET.MetadataAsValue)~Llvm.NET.Metadata</parameter>
          </include>
        </markup>
      </summary>
      <param name="self">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>self</parameter>
            <parameter>M:Llvm.NET.MetadataAsValue.op_Implicit(Llvm.NET.MetadataAsValue)~Llvm.NET.Metadata</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.MetadataAsValue.op_Implicit(Llvm.NET.MetadataAsValue)~Llvm.NET.Metadata</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.MetadataKind">
      <summary>Enumeration to define debug information metadata nodes</summary>
    </member>
    <member name="F:Llvm.NET.MetadataKind.MDTuple"></member>
    <member name="F:Llvm.NET.MetadataKind.DILocation"></member>
    <member name="F:Llvm.NET.MetadataKind.GenericDINode"></member>
    <member name="F:Llvm.NET.MetadataKind.DISubrange"></member>
    <member name="F:Llvm.NET.MetadataKind.DIEnumerator"></member>
    <member name="F:Llvm.NET.MetadataKind.DIBasicType"></member>
    <member name="F:Llvm.NET.MetadataKind.DIDerivedType"></member>
    <member name="F:Llvm.NET.MetadataKind.DICompositeType"></member>
    <member name="F:Llvm.NET.MetadataKind.DISubroutineType"></member>
    <member name="F:Llvm.NET.MetadataKind.DIFile"></member>
    <member name="F:Llvm.NET.MetadataKind.DICompileUnit"></member>
    <member name="F:Llvm.NET.MetadataKind.DISubprogram"></member>
    <member name="F:Llvm.NET.MetadataKind.DILexicalBlock"></member>
    <member name="F:Llvm.NET.MetadataKind.DILexicalBlockFile"></member>
    <member name="F:Llvm.NET.MetadataKind.DINamespace"></member>
    <member name="F:Llvm.NET.MetadataKind.DIModule"></member>
    <member name="F:Llvm.NET.MetadataKind.DITemplateTypeParameter"></member>
    <member name="F:Llvm.NET.MetadataKind.DITemplateValueParameter"></member>
    <member name="F:Llvm.NET.MetadataKind.DIGlobalVariable"></member>
    <member name="F:Llvm.NET.MetadataKind.DILocalVariable"></member>
    <member name="F:Llvm.NET.MetadataKind.DIExpression"></member>
    <member name="F:Llvm.NET.MetadataKind.DIObjCProperty"></member>
    <member name="F:Llvm.NET.MetadataKind.DIImportedEntity"></member>
    <member name="F:Llvm.NET.MetadataKind.ConstantAsMetadata"></member>
    <member name="F:Llvm.NET.MetadataKind.LocalAsMetadata"></member>
    <member name="F:Llvm.NET.MetadataKind.MDString"></member>
    <member name="T:Llvm.NET.Module">
      <summary>LLVM Bit code module</summary>
    </member>
    <member name="M:Llvm.NET.Module.#ctor">
      <summary>Creates an unnamed module without debug information</summary>
    </member>
    <member name="M:Llvm.NET.Module.#ctor(System.String)">
      <summary>Creates a new module with the specified id in a new context</summary>
      <param name="moduleId">Module's ID</param>
    </member>
    <member name="M:Llvm.NET.Module.#ctor(System.String,Llvm.NET.Context)">
      <summary>Creates an named module in a given context</summary>
      <param name="moduleId">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>moduleId</parameter>
            <parameter>M:Llvm.NET.Module.#ctor(System.String,Llvm.NET.Context)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Llvm.NET.Module.#ctor(System.String,Llvm.NET.Context)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.Module.#ctor(System.String,Llvm.NET.Context,Llvm.NET.DebugInfo.SourceLanguage,System.String,System.String,System.Boolean,System.String,System.UInt32)">
      <summary>Creates a named module with a root <see cref="P:Llvm.NET.Module.DICompileUnit" /> to contain debugging information</summary>
      <param name="moduleId">Module name</param>
      <param name="context">Context for the module</param>
      <param name="language">Language to store in the debugging information</param>
      <param name="srcFilePath">path of source file to set for the compilation unit</param>
      <param name="producer">Name of the application producing this module</param>
      <param name="optimized">Flag to indicate if the module is optimized</param>
      <param name="flags">Additional flags</param>
      <param name="runtimeVersion">Runtime version if any (use 0 if the runtime version has no meaning)</param>
    </member>
    <member name="M:Llvm.NET.Module.#ctor(System.String,Llvm.NET.DebugInfo.SourceLanguage,System.String,System.String,System.Boolean,System.String,System.UInt32)">
      <summary>Creates a named module with a root <see cref="P:Llvm.NET.Module.DICompileUnit" /> to contain debugging information</summary>
      <param name="moduleId">Module name</param>
      <param name="language">Language to store in the debugging information</param>
      <param name="srcFilePath">path of source file to set for the compilation unit</param>
      <param name="producer">Name of the application producing this module</param>
      <param name="optimized">Flag to indicate if the module is optimized</param>
      <param name="flags">Additional flags</param>
      <param name="runtimeVersion">Runtime version if any (use 0 if the runtime version has no meaning)</param>
    </member>
    <member name="M:Llvm.NET.Module.AddAlias(Llvm.NET.Values.Value,System.String)">
      <summary>Add an alias to the module</summary>
      <param name="aliasee">Value being aliased</param>
      <param name="aliasName">Name of the alias</param>
      <returns>
        <see cref="T:Llvm.NET.Values.GlobalAlias" /> for the alias</returns>
    </member>
    <member name="M:Llvm.NET.Module.AddFunction(System.String,Llvm.NET.Types.IFunctionType)">
      <summary>Add a function with the specified signature to the module</summary>
      <param name="name">Name of the function to add</param>
      <param name="signature">Signature of the function</param>
      <returns>
        <see cref="T:Llvm.NET.Values.Function" />matching the specified signature and name</returns>
    </member>
    <member name="M:Llvm.NET.Module.AddGlobal(Llvm.NET.Types.ITypeRef,System.Boolean,Llvm.NET.Linkage,Llvm.NET.Values.Constant)">
      <summary>Adds a global to this module</summary>
      <param name="typeRef">Type of the global's value</param>
      <param name="isConst">Flag to indicate if this global is a constant</param>
      <param name="linkage">Linkage type for this global</param>
      <param name="constVal">Initial value for the global</param>
      <returns>New global variable</returns>
    </member>
    <member name="M:Llvm.NET.Module.AddGlobal(Llvm.NET.Types.ITypeRef,System.Boolean,Llvm.NET.Linkage,Llvm.NET.Values.Constant,System.String)">
      <summary>Adds a global to this module</summary>
      <param name="typeRef">Type of the global's value</param>
      <param name="isConst">Flag to indicate if this global is a constant</param>
      <param name="linkage">Linkage type for this global</param>
      <param name="constVal">Initial value for the global</param>
      <param name="name">Name of the variable</param>
      <returns>New global variable</returns>
    </member>
    <member name="M:Llvm.NET.Module.AddGlobal(Llvm.NET.Types.ITypeRef,System.String)">
      <summary>Adds a global to this module</summary>
      <param name="typeRef">Type of the global's value</param>
      <param name="name">Name of the global</param>
      <returns>The new <see cref="T:Llvm.NET.Values.GlobalVariable" /></returns>
    </member>
    <member name="M:Llvm.NET.Module.AddModuleFlag(Llvm.NET.ModuleFlagBehavior,System.String,System.UInt32)">
      <summary>Adds a module flag to the module</summary>
      <param name="behavior">Module flag behavior for this flag</param>
      <param name="name">Name of the flag</param>
      <param name="value">Value of the flag</param>
    </member>
    <member name="M:Llvm.NET.Module.AddNamedMetadataOperand(System.String,Llvm.NET.Metadata)">
      <summary>Adds operand value to named metadata</summary>
      <param name="name">Name of the netadata</param>
      <param name="value">operand value</param>
    </member>
    <member name="M:Llvm.NET.Module.AddVersionIdentMetadata(System.String)">
      <summary>Adds an llvm.ident metadata string to the module</summary>
      <param name="version">version information to place in the ident metadata</param>
    </member>
    <member name="M:Llvm.NET.Module.AsString">
      <summary>Creates a string representation of the module</summary>
      <returns>LLVM textual representation of the module</returns>
    </member>
    <member name="P:Llvm.NET.Module.Context">
      <summary>
        <see cref="P:Llvm.NET.Module.Context" /> this module belongs to</summary>
    </member>
    <member name="M:Llvm.NET.Module.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugFunctionType,System.Boolean,System.Boolean,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Boolean,Llvm.NET.MDNode,Llvm.NET.MDNode)">
      <summary>Creates a Function definition with Debug information</summary>
      <param name="scope">Containing scope for the function</param>
      <param name="name">Name of the function in source language form</param>
      <param name="linkageName">Mangled linker visible name of the function (may be same as <paramref name="name" /> if mangling not required by source language</param>
      <param name="file">File containing the function definition</param>
      <param name="line">Line number of the function definition</param>
      <param name="signature">LLVM Function type for the signatur of the function</param>
      <param name="isLocalToUnit">Flag to indicate if this function is local to the compilation unit</param>
      <param name="isDefinition">Flag to indicate if this is a definition</param>
      <param name="scopeLine">First line of the function's outermost scope, this may not be the same as the first line of the function definition due to source formatting</param>
      <param name="flags">Additional flags describing this function</param>
      <param name="isOptimized">Flag to indicate if this function is optimized</param>
      <param name="tParam"></param>
      <param name="decl"></param>
      <returns>Function described by the arguments</returns>
    </member>
    <member name="P:Llvm.NET.Module.DataLayoutString">
      <summary>Data layout string</summary>
    </member>
    <member name="F:Llvm.NET.Module.DebugMetadataVersion">
      <summary>Version of the Debug information Metadata</summary>
    </member>
    <member name="F:Llvm.NET.Module.DebugVersionValue">
      <summary>Name of the Debug Version information module flag</summary>
    </member>
    <member name="P:Llvm.NET.Module.DIBuilder">
      <summary>
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoBuilder" /> to create debug information for this module</summary>
    </member>
    <member name="P:Llvm.NET.Module.DICompileUnit">
      <summary>Debug Comile unit for this module</summary>
    </member>
    <member name="M:Llvm.NET.Module.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.Module</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.Module.DwarfVersionValue">
      <summary>Name of the Dwarf Version module flag</summary>
    </member>
    <member name="M:Llvm.NET.Module.Finalize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Module.Finalize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Module.Functions">
      <summary>Enumerable collection of functions contained in this module</summary>
    </member>
    <member name="M:Llvm.NET.Module.GetAlias(System.String)">
      <summary>Get an alias by name</summary>
      <param name="name">name of the alias to get</param>
      <returns>Alias matching <paramref name="name" /> or null if no such alias exists</returns>
    </member>
    <member name="M:Llvm.NET.Module.GetFunction(System.String)">
      <summary>Gets a function by name from this module</summary>
      <param name="name">Name of the function to get</param>
      <returns>The function or null if not found</returns>
    </member>
    <member name="M:Llvm.NET.Module.GetNamedGlobal(System.String)">
      <summary>Retrieves a named global from the module</summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.Module.GetNamedGlobal(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Module.GetNamedGlobal(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Module.GetTypeByName(System.String)">
      <summary>Retrieves a <see cref="T:Llvm.NET.Types.ITypeRef" /> by name from the module</summary>
      <param name="name">Name of the type</param>
      <returns>The type or null if no type with the specified name exists in the module</returns>
    </member>
    <member name="P:Llvm.NET.Module.Globals">
      <summary>Globals contained by this module</summary>
    </member>
    <member name="P:Llvm.NET.Module.Layout">
      <summary>Target data layout for this module</summary>
    </member>
    <member name="M:Llvm.NET.Module.Link(Llvm.NET.Module,Llvm.NET.LinkerMode)">
      <summary>Link another module into the current module</summary>
      <param name="otherModule">Module to merge into this one</param>
      <param name="linkMode">Linker mode to use when merging</param>
    </member>
    <member name="M:Llvm.NET.Module.Llvm#NET#IExtensiblePropertyContainer#AddExtendedPropertyValue(System.String,System.Object)">
      <summary>Adds a value to the container</summary>
      <param name="id">Id of the value</param>
      <param name="value">value to add</param>
    </member>
    <member name="M:Llvm.NET.Module.Llvm#NET#IExtensiblePropertyContainer#TryGetExtendedPropertyValue``1(System.String,``0@)">
      <summary>Try to get a value from the container</summary>
      <param name="id">id of the value to retrieve</param>
      <param name="value">value retrieved if present (or default value of type <typeparamref name="T" /> otherwise)</param>
      <typeparam name="T">Type of value to retrieve</typeparam>
      <returns>
            true if the item was found and it's type matches <typeparamref name="T" /> false otherwise.
            </returns>
    </member>
    <member name="M:Llvm.NET.Module.LoadFrom(System.String)">
      <summary>Load a bit-code module from a given file</summary>
      <param name="path">path of the file to load</param>
      <returns>Loaded <see cref="T:Llvm.NET.Module" /></returns>
    </member>
    <member name="M:Llvm.NET.Module.LoadFrom(System.String,Llvm.NET.Context)">
      <summary>Load a bit-code module from a given file</summary>
      <param name="path">path of the file to load</param>
      <param name="context">Context to use for creating the module</param>
      <returns>Loaded <see cref="T:Llvm.NET.Module" /></returns>
    </member>
    <member name="P:Llvm.NET.Module.Name">
      <summary>Name of the module</summary>
    </member>
    <member name="P:Llvm.NET.Module.TargetTriple">
      <summary>Target Triple describing the target, ABI and OS</summary>
    </member>
    <member name="M:Llvm.NET.Module.Verify(System.String@)">
      <summary>Verifies a bit-code module</summary>
      <param name="errmsg">Error messages describing any issues found in the bit-code</param>
      <returns>true if the verification succeeded and false if not.</returns>
    </member>
    <member name="M:Llvm.NET.Module.WriteToFile(System.String)">
      <summary>Writes a bit-code module to a file</summary>
      <param name="path">Path to write the bit-code into</param>
    </member>
    <member name="M:Llvm.NET.Module.WriteToTextFile(System.String,System.String@)">
      <summary>Writes this module as LLVM IR source to a file</summary>
      <param name="path">File to write the LLVM IR source to</param>
      <param name="errMsg">Error messages encountered, if any</param>
      <returns>
        <see langword="true" /> if succesful or <see langword="false" /> if not</returns>
    </member>
    <member name="T:Llvm.NET.ModuleFlagBehavior">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.ModuleFlagBehavior</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.Error"></member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.Warning"></member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.Require"></member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.Override"></member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.Append"></member>
    <member name="F:Llvm.NET.ModuleFlagBehavior.AppendUnique"></member>
    <member name="T:Llvm.NET.Opcode">
      <summary>LLVM Instruction opcodes</summary>
    </member>
    <member name="F:Llvm.NET.Opcode.Return"></member>
    <member name="F:Llvm.NET.Opcode.Branch"></member>
    <member name="F:Llvm.NET.Opcode.Switch"></member>
    <member name="F:Llvm.NET.Opcode.IndirectBranch"></member>
    <member name="F:Llvm.NET.Opcode.Invoke"></member>
    <member name="F:Llvm.NET.Opcode.Unreachable"></member>
    <member name="F:Llvm.NET.Opcode.Add"></member>
    <member name="F:Llvm.NET.Opcode.FAdd"></member>
    <member name="F:Llvm.NET.Opcode.Sub"></member>
    <member name="F:Llvm.NET.Opcode.FSub"></member>
    <member name="F:Llvm.NET.Opcode.Mul"></member>
    <member name="F:Llvm.NET.Opcode.FMul"></member>
    <member name="F:Llvm.NET.Opcode.UDiv"></member>
    <member name="F:Llvm.NET.Opcode.SDiv"></member>
    <member name="F:Llvm.NET.Opcode.FDiv"></member>
    <member name="F:Llvm.NET.Opcode.URem"></member>
    <member name="F:Llvm.NET.Opcode.SRem"></member>
    <member name="F:Llvm.NET.Opcode.FRem"></member>
    <member name="F:Llvm.NET.Opcode.Shl"></member>
    <member name="F:Llvm.NET.Opcode.LShr"></member>
    <member name="F:Llvm.NET.Opcode.AShr"></member>
    <member name="F:Llvm.NET.Opcode.And"></member>
    <member name="F:Llvm.NET.Opcode.Or"></member>
    <member name="F:Llvm.NET.Opcode.Xor"></member>
    <member name="F:Llvm.NET.Opcode.Alloca"></member>
    <member name="F:Llvm.NET.Opcode.Load"></member>
    <member name="F:Llvm.NET.Opcode.Store"></member>
    <member name="F:Llvm.NET.Opcode.GetElementPtr"></member>
    <member name="F:Llvm.NET.Opcode.Trunc"></member>
    <member name="F:Llvm.NET.Opcode.ZeroExtend"></member>
    <member name="F:Llvm.NET.Opcode.SignExtend"></member>
    <member name="F:Llvm.NET.Opcode.FPToUI"></member>
    <member name="F:Llvm.NET.Opcode.FPToSI"></member>
    <member name="F:Llvm.NET.Opcode.UIToFP"></member>
    <member name="F:Llvm.NET.Opcode.SIToFP"></member>
    <member name="F:Llvm.NET.Opcode.FPTrunc"></member>
    <member name="F:Llvm.NET.Opcode.FPExt"></member>
    <member name="F:Llvm.NET.Opcode.PtrToInt"></member>
    <member name="F:Llvm.NET.Opcode.IntToPtr"></member>
    <member name="F:Llvm.NET.Opcode.BitCast"></member>
    <member name="F:Llvm.NET.Opcode.AddrSpaceCast"></member>
    <member name="F:Llvm.NET.Opcode.ICmp"></member>
    <member name="F:Llvm.NET.Opcode.FCmp"></member>
    <member name="F:Llvm.NET.Opcode.Phi"></member>
    <member name="F:Llvm.NET.Opcode.Call"></member>
    <member name="F:Llvm.NET.Opcode.Select"></member>
    <member name="F:Llvm.NET.Opcode.UserOp1"></member>
    <member name="F:Llvm.NET.Opcode.UserOp2"></member>
    <member name="F:Llvm.NET.Opcode.VaArg"></member>
    <member name="F:Llvm.NET.Opcode.ExtractElement"></member>
    <member name="F:Llvm.NET.Opcode.InsertElement"></member>
    <member name="F:Llvm.NET.Opcode.ShuffleVector"></member>
    <member name="F:Llvm.NET.Opcode.ExtractValue"></member>
    <member name="F:Llvm.NET.Opcode.InsertValue"></member>
    <member name="F:Llvm.NET.Opcode.Fence"></member>
    <member name="F:Llvm.NET.Opcode.AtomicCmpXchg"></member>
    <member name="F:Llvm.NET.Opcode.AtomicRMW"></member>
    <member name="F:Llvm.NET.Opcode.Resume"></member>
    <member name="F:Llvm.NET.Opcode.LandingPad"></member>
    <member name="T:Llvm.NET.PassManagerBuilder">
      <summary>Provides a wrapper around an LLVM Pass Manager</summary>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.PassManagerBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.PassManagerBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.SetDisableSimplifyLibCalls(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableSimplifyLibCalls(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableSimplifyLibCalls(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.SetDisableUnitAtATime(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableUnitAtATime(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableUnitAtATime(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.SetDisableUnrollLoops(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableUnrollLoops(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetDisableUnrollLoops(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.SetOptLevel(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetOptLevel(System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="optLevel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>optLevel</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetOptLevel(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.PassManagerBuilder.SetSizeLevel(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetSizeLevel(System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="sizeLevel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sizeLevel</parameter>
            <parameter>M:Llvm.NET.PassManagerBuilder.SetSizeLevel(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Llvm.NET.Predicate">
      <summary>Unified predicate enumeration</summary>
    </member>
    <member name="F:Llvm.NET.Predicate.False"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndEqual"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndGreaterThan"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndGreaterThanOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndLessThan"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndLessThanOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.OrderedAndNotEqual"></member>
    <member name="F:Llvm.NET.Predicate.Ordered"></member>
    <member name="F:Llvm.NET.Predicate.Unordered"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedAndEqual"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedOrGreaterThan"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedOrGreaterThanOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedOrLessThan"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedOrLessThanOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.UnorderedOrNotEqual"></member>
    <member name="F:Llvm.NET.Predicate.True"></member>
    <member name="F:Llvm.NET.Predicate.FirstFcmpPredicate"></member>
    <member name="F:Llvm.NET.Predicate.LastFcmpPredicate"></member>
    <member name="F:Llvm.NET.Predicate.BadFcmpPredicate">
      <summary>Any value Greater than or equal to this is not valid for Fcmp operations</summary>
    </member>
    <member name="F:Llvm.NET.Predicate.Equal"></member>
    <member name="F:Llvm.NET.Predicate.NotEqual"></member>
    <member name="F:Llvm.NET.Predicate.UnsignedGreater"></member>
    <member name="F:Llvm.NET.Predicate.UnsignedGreaterOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.UnsignedLess"></member>
    <member name="F:Llvm.NET.Predicate.UnsignedLessOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.SignedGreater"></member>
    <member name="F:Llvm.NET.Predicate.SignedGreaterOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.SignedLess"></member>
    <member name="F:Llvm.NET.Predicate.SignedLessOrEqual"></member>
    <member name="F:Llvm.NET.Predicate.FirstIcmpPredicate"></member>
    <member name="F:Llvm.NET.Predicate.LastIcmpPredicate"></member>
    <member name="F:Llvm.NET.Predicate.BadIcmpPredicate">
      <summary>Any value Greater than or equal to this is not valid for Icmp operations</summary>
    </member>
    <member name="T:Llvm.NET.RealPredicate">
      <summary>Predicate enumeration for integer comparison</summary>
    </member>
    <member name="F:Llvm.NET.RealPredicate.False"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndGreaterThan"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndGreaterThanOrEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndLessThan"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndLessThanOrEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.OrderedAndNotEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.Ordered"></member>
    <member name="F:Llvm.NET.RealPredicate.Unordered"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedAndEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedOrGreaterThan"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedOrGreaterThanOrEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedOrLessThan"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedOrLessThanOrEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.UnorderedOrNotEqual"></member>
    <member name="F:Llvm.NET.RealPredicate.True"></member>
    <member name="T:Llvm.NET.Reloc">
      <summary>Relocation type for target code generation</summary>
    </member>
    <member name="F:Llvm.NET.Reloc.Default"></member>
    <member name="F:Llvm.NET.Reloc.Static"></member>
    <member name="F:Llvm.NET.Reloc.PositionIndependent"></member>
    <member name="F:Llvm.NET.Reloc.Dynamic"></member>
    <member name="T:Llvm.NET.ScalarEnumerable">
      <summary>Static utility class for constructiong enumerable sequences using single values</summary>
    </member>
    <member name="M:Llvm.NET.ScalarEnumerable.Combine``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Creates a new enumerable that appends a value to an existing enumerable sequence</summary>
      <param name="values">Existing enumerable</param>
      <param name="scalar">Value to append to the existing sequence</param>
      <typeparam name="T">Type of values to enumerate</typeparam>
      <returns>New enumerable sequence ending with <paramref name="scalar" /></returns>
    </member>
    <member name="M:Llvm.NET.ScalarEnumerable.Combine``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new enumerable that prepends a value to an existing enumerable sequence</summary>
      <param name="scalar">Value to prepend to the sequence</param>
      <param name="values">Existing enumerable</param>
      <typeparam name="T">Type of values to enumerate</typeparam>
      <returns>New enumerable sequence starting with <paramref name="scalar" /></returns>
    </member>
    <member name="M:Llvm.NET.ScalarEnumerable.From``1(``0)">
      <summary>Create an enumerator that provides a single value</summary>
      <param name="scalar">Value for the enumerator to provide</param>
      <typeparam name="T">Type of value to enumerate</typeparam>
      <returns>Enumerable sequence containing a single value</returns>
    </member>
    <member name="T:Llvm.NET.StaticState">
      <summary>Provides support for various LLVM static state initialization and manipulation</summary>
    </member>
    <member name="M:Llvm.NET.StaticState.ParseCommandLineOptions(System.String[],System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.StaticState.ParseCommandLineOptions(System.String[],System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="args">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>args</parameter>
            <parameter>M:Llvm.NET.StaticState.ParseCommandLineOptions(System.String[],System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="overview">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>overview</parameter>
            <parameter>M:Llvm.NET.StaticState.ParseCommandLineOptions(System.String[],System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterAArch64(Llvm.NET.TargetRegistration)">
      <summary>Registers components for ARM AArch64 target(s)</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterAll(Llvm.NET.TargetRegistration)">
      <summary>Registers components for all available targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterAMDGPU(Llvm.NET.TargetRegistration)">
      <summary>Registers components for AMDGPU targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterARM(Llvm.NET.TargetRegistration)">
      <summary>Registers components for ARM 32bit and 16bit thumb targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterHexagon(Llvm.NET.TargetRegistration)">
      <summary>Registers components for the Hexagon CPU</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterMips(Llvm.NET.TargetRegistration)">
      <summary>Registers components for MIPS targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterMSP430(Llvm.NET.TargetRegistration)">
      <summary>Registers components for MSP430 targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterNative(Llvm.NET.TargetRegistration)">
      <summary>Registers components for the target representing the system the calling process is running on</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterNVPTX(Llvm.NET.TargetRegistration)">
      <summary>Registers components for the NVPTX targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterPowerPC(Llvm.NET.TargetRegistration)">
      <summary>Registers components for the PowerPC targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterSparc(Llvm.NET.TargetRegistration)">
      <summary>Registers components for SPARC targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterSystemZ(Llvm.NET.TargetRegistration)">
      <summary>Registers components for SystemZ targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterX86(Llvm.NET.TargetRegistration)">
      <summary>Registers components for X86 targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="M:Llvm.NET.StaticState.RegisterXCore(Llvm.NET.TargetRegistration)">
      <summary>Registers components for XCore targets</summary>
      <param name="regFlags">Flags indicating which components to register/enable</param>
    </member>
    <member name="T:Llvm.NET.Target">
      <summary>LLVM Target Instruction Set Architecture</summary>
    </member>
    <member name="P:Llvm.NET.Target.AvailableTargets">
      <summary>Retrives an enumerable collection of the available targets built into this library</summary>
    </member>
    <member name="M:Llvm.NET.Target.CreateTargetMachine(System.String,System.String,System.String,Llvm.NET.CodeGenOpt,Llvm.NET.Reloc,Llvm.NET.CodeModel)">
      <summary>Creates a <see cref="T:Llvm.NET.TargetMachine" /> for the target and specified parameters</summary>
      <param name="triple">Target triple for this machine (e.g. -mtriple)</param>
      <param name="cpu">CPU for this machine (e.g. -mcpu)</param>
      <param name="features">Features for this machine (e.g. -mattr...)</param>
      <param name="optLevel">Optimization level</param>
      <param name="relocationMode">Relocation mode for generated code</param>
      <param name="codeModel">
        <see cref="T:Llvm.NET.CodeModel" /> to use for generated code</param>
      <returns>
        <see cref="T:Llvm.NET.TargetMachine" /> based on the specified parameters</returns>
    </member>
    <member name="P:Llvm.NET.Target.Description">
      <summary>Description of this target</summary>
    </member>
    <member name="M:Llvm.NET.Target.FromTriple(System.String)">
      <summary>Gets the target for a given target "triple" value</summary>
      <param name="targetTriple">Target triple string describing the target</param>
      <returns>Target for the given triple</returns>
    </member>
    <member name="P:Llvm.NET.Target.HasAsmBackEnd">
      <summary>Flag indicating if this target has an Assembly code generating back end initialized</summary>
    </member>
    <member name="P:Llvm.NET.Target.HasJIT">
      <summary>Flag indicating if this target has JIT support</summary>
    </member>
    <member name="P:Llvm.NET.Target.HasTargetMachine">
      <summary>Flag indicating if this target has a TargetMachine initialized</summary>
    </member>
    <member name="P:Llvm.NET.Target.Name">
      <summary>Name of this target</summary>
    </member>
    <member name="T:Llvm.NET.TargetData">
      <summary>Provides access to LLVM target data layout information</summary>
    </member>
    <member name="M:Llvm.NET.TargetData.AbiAlignmentOf(Llvm.NET.Types.ITypeRef)">
      <summary>Retrieves the ABI specified alignment, in bytes, for a specified type</summary>
      <param name="typeRef">Type to get the alignment for</param>
      <returns>ABI specified alignment</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.AbiBitAlignmentOf(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.AbiBitAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.TargetData.AbiBitAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.AbiBitAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.AbiSizeOf(Llvm.NET.Types.ITypeRef)">
      <summary>Retrieves the ABI specified size of the given type</summary>
      <param name="typeRef">Type to ge the size from</param>
      <returns>Size of the type</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.BitOffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.BitOffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.TargetData.BitOffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="element">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>element</parameter>
            <parameter>M:Llvm.NET.TargetData.BitOffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.BitOffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.BitSizeOf(Llvm.NET.Types.ITypeRef)">
      <summary>Returns the number of bits necessary to hold the specified type.</summary>
      <param name="typeRef">Type to retrieve the size of</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.BitSizeOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.ByteSizeOf(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.ByteSizeOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.TargetData.ByteSizeOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.ByteSizeOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.CallFrameAlignmentOf(Llvm.NET.Types.ITypeRef)">
      <summary>Retrieves the call frame alignment for a given type</summary>
      <param name="typeRef">type to get the alignment of</param>
      <returns>Alignment for the type</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.TargetData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.TargetData.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Llvm.NET.TargetData</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Llvm.NET.TargetData</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.TargetData.ElementAtOffset(Llvm.NET.Types.IStructType,System.UInt64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.ElementAtOffset(Llvm.NET.Types.IStructType,System.UInt64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="structType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>structType</parameter>
            <parameter>M:Llvm.NET.TargetData.ElementAtOffset(Llvm.NET.Types.IStructType,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <param name="offset">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offset</parameter>
            <parameter>M:Llvm.NET.TargetData.ElementAtOffset(Llvm.NET.Types.IStructType,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.ElementAtOffset(Llvm.NET.Types.IStructType,System.UInt64)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.TargetData.Endianess">
      <summary>Retrives the byte ordering for this target</summary>
    </member>
    <member name="M:Llvm.NET.TargetData.Finalize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.Finalize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.TargetData.IntPtrType">
      <summary>Retrives an LLVM integer type with the same bit width as
            a pointer for the default address sapce of the target</summary>
      <returns>Integer type matching the bit width of a native pointer in the target's default address space</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.IntPtrType(System.UInt32)">
      <summary>Retrives an LLVM integer type with the same bit width as
            a pointer for the given address sapce of the target</summary>
      <param name="addressSpace">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addressSpace</parameter>
            <parameter>M:Llvm.NET.TargetData.IntPtrType(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>Integer type matching the bit width of a native pointer in the target's address space</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.OffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.OffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="structType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>structType</parameter>
            <parameter>M:Llvm.NET.TargetData.OffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="element">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>element</parameter>
            <parameter>M:Llvm.NET.TargetData.OffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.OffsetOfElement(Llvm.NET.Types.IStructType,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.Parse(System.String)">
      <summary>Parses an LLVM target layout string</summary>
      <param name="layoutString">string to parse</param>
      <returns>Parsed target data</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.PointerSize">
      <summary>Retrieves the size of a pointer for the default address space of the target</summary>
      <returns>Size of a pointer to the default address space</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.PointerSize(System.UInt32)">
      <summary>Retrieves the size of a pointer for a given address space of the target</summary>
      <param name="addressSpace">Address space for the pointer</param>
      <returns>Size of a pointer</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="typeRef">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>typeRef</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredAlignmentOf(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.PreferredBitAlignementOf(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredBitAlignementOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredBitAlignementOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.PreferredBitAlignementOf(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.TargetData.StoreSizeOf(Llvm.NET.Types.ITypeRef)">
      <summary>Retrieves the number of bits required to store a value of the given type</summary>
      <param name="typeRef">Type to retrive the storage size of</param>
      <returns>Number of bits required to store a value of the given type in the target</returns>
    </member>
    <member name="M:Llvm.NET.TargetData.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetData.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.TargetData.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.TargetMachine">
      <summary>Target specific code generation information</summary>
    </member>
    <member name="P:Llvm.NET.TargetMachine.Cpu">
      <summary>CPU Type for this machine</summary>
    </member>
    <member name="M:Llvm.NET.TargetMachine.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.TargetMachine</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.TargetMachine.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>Llvm.NET.TargetMachine</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>Llvm.NET.TargetMachine</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.TargetMachine.EmitToFile(Llvm.NET.Module,System.String,Llvm.NET.CodeGenFileType)">
      <summary>Generate code for the target machine from a module</summary>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> to generate the code from</param>
      <param name="path">Path to the output file</param>
      <param name="fileType">Type of file to emit</param>
    </member>
    <member name="P:Llvm.NET.TargetMachine.Features">
      <summary>CPU specific features for this machine</summary>
    </member>
    <member name="M:Llvm.NET.TargetMachine.Finalize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.TargetMachine.Finalize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.TargetMachine.Target">
      <summary>Retrieves the Target that owns this <see cref="T:Llvm.NET.TargetMachine" /></summary>
    </member>
    <member name="P:Llvm.NET.TargetMachine.TargetData">
      <summary>Layout information for this machine</summary>
    </member>
    <member name="P:Llvm.NET.TargetMachine.Triple">
      <summary>Target trip[le describing this machine</summary>
    </member>
    <member name="T:Llvm.NET.TargetRegistration">
      <summary>Target tools to register/enable</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.None">
      <summary>Register nothing</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.Target">
      <summary>Register the Target class</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.TargetInfo">
      <summary>Register the Target info for the target</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.TargetMachine">
      <summary>Register the target machine(s) for a target</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.AsmPrinter">
      <summary>Registers the assembly source code generator for a target</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.Disassembler">
      <summary>Registers the Disassembler for a target</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.AsmParser">
      <summary>Registers the assembly source parser for a target</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.CodeGen">
      <summary>Registers all the codegeneration components</summary>
    </member>
    <member name="F:Llvm.NET.TargetRegistration.All">
      <summary>Registers all components</summary>
    </member>
    <member name="T:Llvm.NET.TypeKind">
      <summary>Basic kind of a type</summary>
    </member>
    <member name="F:Llvm.NET.TypeKind.Void"></member>
    <member name="F:Llvm.NET.TypeKind.Float16"></member>
    <member name="F:Llvm.NET.TypeKind.Float32"></member>
    <member name="F:Llvm.NET.TypeKind.Float64"></member>
    <member name="F:Llvm.NET.TypeKind.X86Float80"></member>
    <member name="F:Llvm.NET.TypeKind.Float128m112"></member>
    <member name="F:Llvm.NET.TypeKind.Float128"></member>
    <member name="F:Llvm.NET.TypeKind.Label"></member>
    <member name="F:Llvm.NET.TypeKind.Integer"></member>
    <member name="F:Llvm.NET.TypeKind.Function"></member>
    <member name="F:Llvm.NET.TypeKind.Struct"></member>
    <member name="F:Llvm.NET.TypeKind.Array"></member>
    <member name="F:Llvm.NET.TypeKind.Pointer"></member>
    <member name="F:Llvm.NET.TypeKind.Vector"></member>
    <member name="F:Llvm.NET.TypeKind.Metadata"></member>
    <member name="F:Llvm.NET.TypeKind.X86MMX"></member>
    <member name="T:Llvm.NET.Visibility">
      <summary>Enumeration for the visibility of a global value</summary>
    </member>
    <member name="F:Llvm.NET.Visibility.Default"></member>
    <member name="F:Llvm.NET.Visibility.Hidden"></member>
    <member name="F:Llvm.NET.Visibility.Protected"></member>
    <member name="T:Llvm.NET.DebugInfo.DebugArrayType">
      <summary>Provides debug information binding between an <see cref="T:Llvm.NET.Types.IArrayType" />and a <see cref="T:Llvm.NET.DebugInfo.DICompositeType" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugArrayType" /></summary>
      <param name="elementType">Type of elements in the array</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> to use for the context of the debug information</param>
      <param name="count">Number of elements in the array</param>
      <param name="lowerBound">Lowerbound value for the array indeces [Default: 0]</param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DebugArrayType</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="elementType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lowerBound">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lowerBound</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugArrayType.#ctor(Llvm.NET.Types.IArrayType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIType,System.UInt32,System.UInt32)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugArrayType" /></summary>
      <param name="llvmType">Native LLVM type for the elements</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> to use for the context of the debug information</param>
      <param name="elementType">Debug type of the array elements</param>
      <param name="count">Number of elements in the array</param>
      <param name="lowerbound">Lowerbound value for the array indeces [Default: 0]</param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugArrayType.DebugElementType">
      <summary>Full <see cref="T:Llvm.NET.DebugInfo.IDebugType`2" /> type for the elements</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugArrayType.ElementType">
      <summary>Type of elements in the sequence</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugArrayType.Length">
      <summary>Length of the array</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugBasicType">
      <summary>Debug information bindoing between an LLVM native <see cref="T:Llvm.NET.Types.ITypeRef" /> and a <see cref="T:Llvm.NET.DebugInfo.DIBasicType" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugBasicType.#ctor(Llvm.NET.Types.ITypeRef,Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DiTypeKind)">
      <summary>Create a debug type for a basic type</summary>
      <param name="llvmType">Type to wrap debug information for</param>
      <param name="module">Module to use when constructing the debug information</param>
      <param name="name">Source language name of the type</param>
      <param name="encoding">Encoding for the type</param>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugFunctionType">
      <summary>This class provides debug information binding for an <see cref="T:Llvm.NET.Types.IFunctionType" />
            and a <see cref="T:Llvm.NET.DebugInfo.DISubroutineType" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugFunctionType.#ctor(Llvm.NET.Types.IFunctionType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIFile,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.DebugInfo.DebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType}[])">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugFunctionType" /></summary>
      <param name="llvmType">Native LLVM function signature</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> to use when constructiong debug information</param>
      <param name="diFile">Source file information for this signature (may be null)</param>
      <param name="flags">
        <see cref="T:Llvm.NET.DebugInfo.DebugInfoFlags" /> for this signature</param>
      <param name="retType">Return type for the function</param>
      <param name="argTypes">Potentially empty set of argument types for the signature</param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugFunctionType.IsVarArg">
      <summary>Flag to indicate if this signature is for a variadic function</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugFunctionType.ParameterTypes">
      <summary>Collection of types of the paramters for the function</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugFunctionType.ReturnType">
      <summary>Return type of the function</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugInfoBuilder">
      <summary>DebugInfoBuilder is a factory class for creating DebugInformation for an LLVM
            <see cref="T:Llvm.NET.Module" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="alwaysPreserve">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alwaysPreserve</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="argNo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>argNo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArgument(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </summary>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="elementType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="subScripts">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>subScripts</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="elementType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elementType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="subScripts">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>subScripts</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateArrayType(System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </param>
      <param name="encoding">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>encoding</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateBasicType(System.String,System.UInt64,System.UInt64,Llvm.NET.DebugInfo.DiTypeKind)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateCompileUnit(Llvm.NET.DebugInfo.SourceLanguage,System.String,System.String,System.Boolean,System.String,System.UInt32)">
      <summary>Creates a new <see cref="T:Llvm.NET.DebugInfo.DICompileUnit" /></summary>
      <param name="language">
        <see cref="T:Llvm.NET.DebugInfo.SourceLanguage" /> for the compilation unit</param>
      <param name="srcFilePath">Full path to the source file of this compilation unit</param>
      <param name="producer">Name of the application processing the compilation unit</param>
      <param name="optimized">Flag to indicate if the code in this compilation unit is optimized</param>
      <param name="flags">Additional tool specific flags</param>
      <param name="runtimeVersion">Runtime version</param>
      <returns>
        <see cref="T:Llvm.NET.DebugInfo.DICompileUnit" />
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateCompileUnit(Llvm.NET.DebugInfo.SourceLanguage,System.String,System.String,System.String,System.Boolean,System.String,System.UInt32)">
      <summary>Creates a new <see cref="T:Llvm.NET.DebugInfo.DICompileUnit" /></summary>
      <param name="language">
        <see cref="T:Llvm.NET.DebugInfo.SourceLanguage" /> for the compilation unit</param>
      <param name="fileName">Name of the source file of this compilation unit (without any path)</param>
      <param name="fileDirectory">Path of the directory containing the file</param>
      <param name="producer">Name of the application processing the compilation unit</param>
      <param name="optimized">Flag to indicate if the code in this compilation unit is optimized</param>
      <param name="flags">Additional tool specific flags</param>
      <param name="runtimeVersion">Runtime version</param>
      <returns>
        <see cref="T:Llvm.NET.DebugInfo.DICompileUnit" />
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="lineNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lineNumber</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="sizeInBits">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sizeInBits</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="alignInBits">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alignInBits</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="underlyingType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>underlyingType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="uniqueId">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>uniqueId</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumerationType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIEnumerator},Llvm.NET.DebugInfo.DIType,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumeratorValue(System.String,System.Int64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumeratorValue(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumeratorValue(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumeratorValue(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateEnumeratorValue(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(Llvm.NET.DebugInfo.ExpressionOp[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(Llvm.NET.DebugInfo.ExpressionOp[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="operations">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>operations</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(Llvm.NET.DebugInfo.ExpressionOp[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(Llvm.NET.DebugInfo.ExpressionOp[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.ExpressionOp})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.ExpressionOp})</parameter>
          </include>
        </markup>
      </summary>
      <param name="operations">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>operations</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.ExpressionOp})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateExpression(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.ExpressionOp})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFile(System.String)">
      <summary>Creates a <see cref="T:Llvm.NET.DebugInfo.DIFile" /></summary>
      <param name="path">Path of the file (may be <see langword="null" /> or empty)</param>
      <returns>
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> or <see langword="null" /> if <paramref name="path" />
            is <see langword="null" /> empty, or all whitespace
            </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFile(System.String,System.String)">
      <summary>Creates a <see cref="T:Llvm.NET.DebugInfo.DIFile" /></summary>
      <param name="fileName">Name of the file (may be <see langword="null" /> or empty)</param>
      <param name="directory">Path of the directory containing the file (may be <see langword="null" /> or empty)</param>
      <returns>
        <see cref="T:Llvm.NET.DebugInfo.DIFile" /> or <see langword="null" /> if <paramref name="fileName" />
            is <see langword="null" /> empty, or all whitespace
            </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="mangledName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mangledName</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="compositeType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>compositeType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isLocalToUnit">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isLocalToUnit</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isDefinition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isDefinition</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="scopeLine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scopeLine</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isOptimized">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isOptimized</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="function">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>function</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="TParam">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>TParam</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="Decl">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Decl</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="linkageName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>linkageName</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="lineNo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lineNo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isLocalToUnit">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isLocalToUnit</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="decl">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>decl</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateGlobalVariable(Llvm.NET.DebugInfo.DINode,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="column">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>column</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlock(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="discriminator">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>discriminator</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLexicalBlockFile(Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="alwaysPreserve">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alwaysPreserve</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="argNo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>argNo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateLocalVariable(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Boolean,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitOffset">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitOffset</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateMemberType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateNamespace(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)">
      <summary>Creates a <see cref="T:Llvm.NET.DebugInfo.DINamespace" /></summary>
      <param name="scope">Containing scope for the namespace or null if the namespace is a global one</param>
      <param name="name">Name of the namespace</param>
      <param name="file">Source file containing the declaration (may be null if more than one or not known)</param>
      <param name="line">Line number of the namespace declaration</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateNamespace(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pointeeType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pointeeType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreatePointerType(Llvm.NET.DebugInfo.DIType,System.String,System.UInt64,System.UInt64)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateQualifiedType(Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.QualifiedTypeTag)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateQualifiedType(Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.QualifiedTypeTag)</parameter>
          </include>
        </markup>
      </summary>
      <param name="baseType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>baseType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateQualifiedType(Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.QualifiedTypeTag)</parameter>
          </include>
        </markup>
      </param>
      <param name="tag">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tag</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateQualifiedType(Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.QualifiedTypeTag)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateQualifiedType(Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.QualifiedTypeTag)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="tag">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>tag</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lang">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lang</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="sizeInBits">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sizeInBits</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="alignBits">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alignBits</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateReplaceableCompositeType(Llvm.NET.DebugInfo.Tag,System.String,Llvm.NET.DebugInfo.DINode,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="derivedFrom">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>derivedFrom</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DIArray)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="derivedFrom">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>derivedFrom</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,Llvm.NET.DebugInfo.DINode[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlign">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlign</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="derivedFrom">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>derivedFrom</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateStructType(Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,System.UInt64,System.UInt64,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubrange(System.Int64,System.Int64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubrange(System.Int64,System.Int64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="lo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubrange(System.Int64,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubrange(System.Int64,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubrange(System.Int64,System.Int64)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </summary>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="returnType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>returnType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)</parameter>
          </include>
        </markup>
      </summary>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)</parameter>
          </include>
        </markup>
      </param>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateSubroutineType(Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DITypeArray)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(Llvm.NET.DebugInfo.DIType[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </summary>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.CreateTypedef(Llvm.NET.DebugInfo.DIType,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DINode)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>Llvm.NET.DebugInfo.DebugInfoBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.Finish">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.Finish</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </summary>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="mangledName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mangledName</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="compositeType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>compositeType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isLocalToUnit">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isLocalToUnit</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isDefinition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isDefinition</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="scopeLine">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scopeLine</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="isOptimized">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isOptimized</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="function">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>function</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="TParam">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>TParam</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <param name="Decl">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Decl</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.ForwardDeclareFunction(Llvm.NET.DebugInfo.DIScope,System.String,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DICompositeType,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.Boolean,Llvm.NET.Values.Function,Llvm.NET.MDNode,Llvm.NET.MDNode)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </summary>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DINode})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(Llvm.NET.DebugInfo.DIType[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(Llvm.NET.DebugInfo.DIType[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </summary>
      <param name="types">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>types</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.GetOrCreateTypeArray(System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </summary>
      <param name="storage">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>storage</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="varInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varInfo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="expr">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expr</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="location">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>location</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="insertBefore">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>insertBefore</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="storage">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>storage</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="varInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varInfo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="expr">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expr</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="location">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>location</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="insertAtEnd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>insertAtEnd</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DIExpression,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </summary>
      <param name="storage">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>storage</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="varInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varInfo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="location">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>location</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <param name="insertBefore">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>insertBefore</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Instructions.Instruction)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="storage">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>storage</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="varInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>varInfo</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="location">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>location</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="insertAtEnd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>insertAtEnd</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugInfoBuilder.InsertDeclare(Llvm.NET.Values.Value,Llvm.NET.DebugInfo.DILocalVariable,Llvm.NET.DebugInfo.DILocation,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugInfoFlags">
      <summary>Accessibility flags</summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.None"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Private"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Protected"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Public"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.AccessibilityMask"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.FwdDecl"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.AppleBlock"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.BlockByrefStruct"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Virtual"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Artificial"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Explicit"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Prototyped"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.ObjcClassComplete"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.ObjectPointer"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.Vector"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.StaticMember"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.IndirectVariable"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.LValueReference"></member>
    <member name="F:Llvm.NET.DebugInfo.DebugInfoFlags.RValueReference"></member>
    <member name="T:Llvm.NET.DebugInfo.DebugMemberInfo">
      <summary>Describes a member/field of a type for creating debug information</summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugMemberInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DebugMemberInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.ExplicitLayout">
      <summary>Provides explicit layout information for this member</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.File">
      <summary>File the field is declared in</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.Flags">
      <summary>flags for the field declaration</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.Index">
      <summary>LLVM structure element index this descriptor describes</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.Line">
      <summary>Line the field is declared on</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.Name">
      <summary>Name of the field</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberInfo.Type">
      <summary>Debug type information for this field</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugMemberLayout">
      <summary>DebugMemberLayout is used to define custom layout information for structure members</summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugMemberLayout.#ctor(System.UInt32,System.UInt32,System.UInt64)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugMemberLayout" /></summary>
      <param name="bitSize">Size of the member in bits</param>
      <param name="bitAlignment">Alignment of the member in bits</param>
      <param name="bitOffset">Offset of the member in bits</param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberLayout.BitAlignment">
      <summary>Bit alignment for the field</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberLayout.BitOffset">
      <summary>Bit offset for the field in it's containing type</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugMemberLayout.BitSize">
      <summary>Bit size for the field</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugPointerType">
      <summary>Binding between a <see cref="T:Llvm.NET.DebugInfo.DIDerivedType" /> and an <see cref="T:Llvm.NET.Types.IPointerType" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugPointerType.#ctor(Llvm.NET.DebugInfo.IDebugType{Llvm.NET.Types.ITypeRef,Llvm.NET.DebugInfo.DIType},Llvm.NET.Module,System.UInt32,System.String)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugPointerType" /></summary>
      <param name="debugType">Debug type of the pointee</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> used for creating the pointer type and debug information</param>
      <param name="addressSpace">Target address space for the pointer [Default: 0]</param>
      <param name="name">Name of the type [Default: null]</param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugPointerType.#ctor(Llvm.NET.Types.IPointerType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIType,System.String)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugPointerType" /></summary>
      <param name="llvmType">Native type of the pointee</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> used for creating the pointer type and debug information</param>
      <param name="elementType">Debug type of the pointee</param>
      <param name="name">Name of the type [Default: null]</param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugPointerType.#ctor(Llvm.NET.Types.ITypeRef,Llvm.NET.Module,Llvm.NET.DebugInfo.DIType,System.UInt32,System.String)">
      <summary>Constructs a new <see cref="T:Llvm.NET.DebugInfo.DebugPointerType" /></summary>
      <param name="llvmType">Native type of the pointee</param>
      <param name="module">
        <see cref="T:Llvm.NET.Module" /> used for creating the pointer type and debug information</param>
      <param name="elementType">Debug type of the pointee</param>
      <param name="addressSpace">Target address space for the pointer [Default: 0]</param>
      <param name="name">Name of the type [Default: null]</param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugPointerType.AddressSpace">
      <summary>Address space the pointer referes to</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugPointerType.ElementType">
      <summary>Type of elements in the sequence</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugStructType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DebugStructType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DebugStructType</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="nativeName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nativeName</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Module,System.String,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DebugStructType</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DebugStructType</parameter>
          </include>
        </markup>
      </summary>
      <param name="llvmType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>llvmType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="file">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>file</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="derivedFrom">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>derivedFrom</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.#ctor(Llvm.NET.Types.IStructType,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,System.String,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,Llvm.NET.DebugInfo.DIType,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DIType})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugStructType.DebugMembers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugStructType.DebugMembers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugStructType.IsOpaque">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugStructType.IsOpaque</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugStructType.IsPacked">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugStructType.IsPacked</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugStructType.Members">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugStructType.Members</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugStructType.Name">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugStructType.Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </summary>
      <param name="packed">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>packed</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="diFile">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>diFile</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
      <param name="debugElements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>debugElements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </summary>
      <param name="packed">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>packed</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="diFile">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>diFile</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="flags">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flags</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="nativeElements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nativeElements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="debugelements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>debugelements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="bitSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitSize</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
      <param name="bitAlignment">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bitAlignment</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Module,Llvm.NET.DebugInfo.DIScope,Llvm.NET.DebugInfo.DIFile,System.UInt32,Llvm.NET.DebugInfo.DebugInfoFlags,System.Collections.Generic.IEnumerable{Llvm.NET.Types.ITypeRef},System.Collections.Generic.IEnumerable{Llvm.NET.DebugInfo.DebugMemberInfo},System.Nullable{System.UInt32},System.Nullable{System.UInt32})</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Types.ITypeRef[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Types.ITypeRef[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="packed">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>packed</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Types.ITypeRef[])</parameter>
          </include>
        </markup>
      </param>
      <param name="elements">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>elements</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugStructType.SetBody(System.Boolean,Llvm.NET.Types.ITypeRef[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DebugType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </summary>
      <param name="nativeType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nativeType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </param>
      <param name="debugType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>debugType</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="NativeT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>NativeT</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="DebugT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>DebugT</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType.Create``2(``0,``1)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DebugType`2">
      <summary>Provides pairing of a <see cref="T:Llvm.NET.Types.ITypeRef" /> with a <see cref="P:Llvm.NET.DebugInfo.DebugType`2.DIType" /> for function signatures</summary>
      <typeparam name="NativeT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>NativeT</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DebugType`2</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="DebugT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>DebugT</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DebugType`2</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.AddExtendedPropertyValue(System.String,System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.Context">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.Context</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lowerBound">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lowerBound</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(Llvm.NET.Module,System.UInt32,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreateArrayType(System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(Llvm.NET.Module,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(Llvm.NET.Module,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(Llvm.NET.Module,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="addressSpace">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addressSpace</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(Llvm.NET.Module,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(Llvm.NET.Module,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="addressSpace">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>addressSpace</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.CreatePointerType(System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.DIType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.DIType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.GetNullValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.GetNullValue</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.GetNullValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.HasDebugInfo">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.HasDebugInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IntegerBitWidth">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IntegerBitWidth</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsDouble">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsDouble</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsFloat">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsFloat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsFloatingPoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsFloatingPoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsInteger">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsInteger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsPointer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsPointer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsPointerPointer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsPointerPointer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsSequence">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsSequence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsSized">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsSized</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsStruct">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsStruct</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.IsVoid">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.IsVoid</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.Kind">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.Kind</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.NativeType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.NativeType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.op_Implicit(Llvm.NET.DebugInfo.DebugType{`0,`1})~`1">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.op_Implicit(Llvm.NET.DebugInfo.DebugType{`0,`1})~`1</parameter>
          </include>
        </markup>
      </summary>
      <param name="self">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>self</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.op_Implicit(Llvm.NET.DebugInfo.DebugType{`0,`1})~`1</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.op_Implicit(Llvm.NET.DebugInfo.DebugType{`0,`1})~`1</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="PropT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>PropT</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DebugType`2.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DebugType`2.TypeHandle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DebugType`2.TypeHandle</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIArray">
      <summary>Array of see Debug information nodes for use with see <a href="DebugInfoBuilder" /> methods</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIBasicType">
      <summary>Debug information for a basic type</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DICompileUnit">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dicompileunit" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DICompositeType">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dicompositetype" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIDerivedType">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#diderivedtype" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIEnumerator">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dienumerator" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIExpression">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#diexpression" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIFile">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#difile" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIGlobalVariable">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#diglobalvariable" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILexicalBlock">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dilexicalblock" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILexicalBlockBase">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DILexicalBlockBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILexicalBlockFile">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dilexicalblockfile" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILocalScope">
      <summary>Legal scope for lexical blocks, local variables, and debug info locations</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILocalVariable">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dilocalvariable" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DILocation">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DILocation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DILocation</parameter>
          </include>
        </markup>
      </summary>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope)</parameter>
          </include>
        </markup>
      </param>
      <param name="column">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>column</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope)</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Llvm.NET.DebugInfo.DILocation</parameter>
          </include>
        </markup>
      </summary>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </param>
      <param name="line">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>line</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </param>
      <param name="column">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>column</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </param>
      <param name="scope">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scope</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </param>
      <param name="inlinedAt">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inlinedAt</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DILocation.#ctor(Llvm.NET.Context,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DILocalScope,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DILocation.Column">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DILocation.Column</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DILocation.InlinedAt">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DILocation.InlinedAt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DILocation.Line">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DILocation.Line</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DILocation.Scope">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DILocation.Scope</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIModule">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DIModule</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DINamespace">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#dinamespace" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DINode">
      <summary>Root of the object hierarchy for Debug information metadata nodes</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DINode.Tag">
      <summary>Dwarf tag for the descriptor</summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DINode.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIObjCProperty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DIObjCProperty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIScope">
      <summary>Base class for all Debug info scopes</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIScope.File">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIScope.File</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DISubProgram">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#disubprogram" /></summary>
    </member>
    <member name="M:Llvm.NET.DebugInfo.DISubProgram.Describes(Llvm.NET.Values.Function)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DISubProgram.Describes(Llvm.NET.Values.Function)</parameter>
          </include>
        </markup>
      </summary>
      <param name="function">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>function</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DISubProgram.Describes(Llvm.NET.Values.Function)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.DebugInfo.DISubProgram.Describes(Llvm.NET.Values.Function)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DISubrange">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#disubrange" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DISubroutineType">
      <summary>see <a href="http://llvm.org/docs/LangRef.html#disubroutinetype" /></summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DITemplateParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DITemplateParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DITemplateTypeParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DITemplateTypeParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DITemplateValueParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DITemplateValueParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DIType">
      <summary>Base class for Debug info types</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.BitAlignment">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.BitAlignment</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.BitOffset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.BitOffset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.BitSize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.BitSize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.Flags">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.Flags</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsAppleBlockExtension">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsAppleBlockExtension</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsArtificial">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsArtificial</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsBlockByRefStruct">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsBlockByRefStruct</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsForwardDeclaration">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsForwardDeclaration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsLvalueReference">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsLvalueReference</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsObjClassComplete">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsObjClassComplete</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsObjectPointer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsObjectPointer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsPrivate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsPrivate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsProtected">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsProtected</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsPublic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsPublic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsRvalueReference">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsRvalueReference</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsStaticMember">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsStaticMember</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsVector">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.IsVirtual">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.IsVirtual</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.Line">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.Line</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.Name">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.DIType.Scope">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.DIType.Scope</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DITypeArray">
      <summary>Array of see <a href="Type" /> nodes for use with see <a href="DebugInfoBuilder" /> methods</summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.DiTypeKind">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DiTypeKind</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Address"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Boolean"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Complex_float"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Float"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Signed"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.SignedChar"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Unsigned"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.UnsignedChar"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.ImaginaryFloat"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.PackedDecimal"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.NumericString"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.Edited"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.SignedFixed"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.UnsignedFixed"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.DecimalFloat"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.UTF"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.LoUser"></member>
    <member name="F:Llvm.NET.DebugInfo.DiTypeKind.HiUser"></member>
    <member name="T:Llvm.NET.DebugInfo.DIVariable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.DIVariable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.ExpressionOp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.ExpressionOp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.addr"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.deref"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const1u"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const1s"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const2u"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const2s"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const4u"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const4s"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const8u"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.const8s"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.constu"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.consts"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.dup"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.drop"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.over"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.pick"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.swap"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.rot"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.xderef"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.abs"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.and"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.div"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.minus"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.mod"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.mul"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.neg"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.not"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.or"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.plus"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.plus_uconst"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.shl"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.shr"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.shra"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.xor"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.skip"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.bra"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.eq"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.ge"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.gt"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.le"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lt"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.ne"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit0"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit1"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit2"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit3"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit4"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit5"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit6"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit7"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit8"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit9"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit10"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit11"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit12"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit13"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit14"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit15"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit16"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit17"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit18"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit19"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit20"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit21"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit22"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit23"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit24"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit25"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit26"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit27"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit28"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit29"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit30"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.lit31"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg0"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg1"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg2"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg3"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg4"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg5"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg6"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg7"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg8"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg9"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg10"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg11"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg12"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg13"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg14"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg15"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg16"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg17"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg18"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg19"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg20"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg21"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg22"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg23"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg24"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg25"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg26"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg27"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg28"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg29"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg30"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.reg31"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg0"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg1"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg2"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg3"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg4"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg5"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg6"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg7"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg8"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg9"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg10"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg11"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg12"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg13"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg14"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg15"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg16"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg17"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg18"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg19"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg20"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg21"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg22"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg23"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg24"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg25"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg26"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg27"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg28"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg29"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg30"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.breg31"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.regx"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.fbreg"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.bregx"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.piece"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.deref_size"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.xderef_size"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.nop"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.push_object_address"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.call2"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.call4"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.call_ref"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.form_tls_address"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.call_frame_cfa"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.bit_piece"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.implicit_value"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.stack_value"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.GNU_push_tls_address"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.GNU_addr_index"></member>
    <member name="F:Llvm.NET.DebugInfo.ExpressionOp.GNU_const_index"></member>
    <member name="T:Llvm.NET.DebugInfo.GenericDINode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.GenericDINode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.IDebugType`2">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.IDebugType`2</parameter>
          </include>
        </markup>
      </summary>
      <typeparam name="NativeT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>NativeT</parameter>
            <parameter>T:Llvm.NET.DebugInfo.IDebugType`2</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="DebugT">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>DebugT</parameter>
            <parameter>T:Llvm.NET.DebugInfo.IDebugType`2</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="P:Llvm.NET.DebugInfo.IDebugType`2.DIType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.IDebugType`2.DIType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.IDebugType`2.HasDebugInfo">
      <summary>Convenience property accessor for determining if the <see cref="P:Llvm.NET.DebugInfo.IDebugType`2.DIType" /> property is valid</summary>
    </member>
    <member name="P:Llvm.NET.DebugInfo.IDebugType`2.NativeType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.DebugInfo.IDebugType`2.NativeType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.DebugInfo.QualifiedTypeTag">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.QualifiedTypeTag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.QualifiedTypeTag.Const"></member>
    <member name="F:Llvm.NET.DebugInfo.QualifiedTypeTag.Volatile"></member>
    <member name="T:Llvm.NET.DebugInfo.SourceLanguage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.SourceLanguage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.C89"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.C"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Ada83"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.CPlusPlus"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Cobol74"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Cobol85"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Fortran77"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Fortran90"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Pascal83"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Modula2"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Java"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.C99"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Ada95"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Fortran95"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.PLI"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.ObjC"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.ObjCPlusPlus"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.UPC"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.D"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Python"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.OpenCL"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Go"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Modula3"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.Haskell"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.CPlusPlus_03"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.CPlusPlus_11"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.OCaml"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.UserMin"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.LLvmMipsAssembler"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.CSharp"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.ILAsm"></member>
    <member name="F:Llvm.NET.DebugInfo.SourceLanguage.UserMax"></member>
    <member name="T:Llvm.NET.DebugInfo.Tag">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.DebugInfo.Tag</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ArrayType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ClassType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.EntryPoint"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.EnumerationType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.FormalParameter"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ImportedDeclaration"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Label"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.LexicalBlock"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Member"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.PointerType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ReferenceType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.CompileUnit"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.StringType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.StructureType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.SubroutineType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TypeDef"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.UnionType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.UnspecifiedParameters"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Variant"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.CommonBlock"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.CommonInclusion"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Inheritance"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.InlinedSubroutine"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Module"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.PtrToMemberType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.SetType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.SubrangeType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.WithStatement"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.AccessDeclaration"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.BaseType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.CatchBlock"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ConstType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Constant"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Enumerator"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.FileType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Friend"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.NameList"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.NameListItem"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.PackedType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.SubProgram"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TemplateTypeParameter"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TemplateValueParameter"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ThrownType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TryBlock"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.VariantPart"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Variable"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.VolatileType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.DwarfProcedure"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.RestrictType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.InterfaceType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Namespace"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ImportedModule"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.UnspecifiedType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.PartialUnit"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.InportedUnit"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Condition"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.SharedType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TypeUnit"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.RValueReferenceType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.TemplateAlias"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.CoArrayType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.GenericSubrange"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.DynamicType"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.AutoVariable"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ArgVariable"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.Expression"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.UserBase"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.MipsLoop"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.FormatLabel"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.FunctionTemplate"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.ClassTemplate"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.GnuTemplateTemplateParam"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.GnuTemplateParameterPack"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.GnuFormalParameterPack"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.LoUser"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.AppleProperty"></member>
    <member name="F:Llvm.NET.DebugInfo.Tag.HiUser"></member>
    <member name="T:Llvm.NET.Instructions.Alloca">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Alloca</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.AtomicCmpXchg">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.AtomicCmpXchg</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.AtomicRMW">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.AtomicRMW</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.BinaryOperator">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.BinaryOperator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.BitCast">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.BitCast</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Branch">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Branch</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Call">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Call</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Cast">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Cast</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Cmp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Cmp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Cmp.Predicate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Cmp.Predicate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.DebugDeclare">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.DebugDeclare</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.DebugInfoIntrinsic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.DebugInfoIntrinsic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.ExtractElement">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.ExtractElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.ExtractValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.ExtractValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.FCmp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.FCmp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Fence">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Fence</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.GetElementPtr">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.GetElementPtr</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.IndirectBranch">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.IndirectBranch</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.InsertElement">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.InsertElement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.InsertValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.InsertValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Instruction">
      <summary>Exposes an LLVM Instruction</summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Instruction.Alignment">
      <summary>Alignment for the instruction</summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Instruction.ContainingBlock">
      <summary>Block that contains this instruction</summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Instruction.IsMemoryAccess">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Instruction.IsMemoryAccess</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Instruction.Opcode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Instruction.Opcode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.InstructionExtensions">
      <summary>Provides extension methods to <see cref="T:Llvm.NET.Instructions.Instruction" /> that cannot be achieved as members of the class</summary>
    </member>
    <member name="M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="inst">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inst</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="alignment">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alignment</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.Alignment``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="inst">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inst</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <param name="alignment">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>alignment</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Instructions.InstructionExtensions.IsVolatile``1(``0,System.UInt32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.Instructions.IntCmp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.IntCmp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Intrinsic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Intrinsic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.IntToPointer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.IntToPointer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Invoke">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Invoke</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.LandingPad">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.LandingPad</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Load">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Load</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Load.IsVolatile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Load.IsVolatile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.MemCpy">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.MemCpy</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.MemIntrinsic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.MemIntrinsic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.MemMove">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.MemMove</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.MemSet">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.MemSet</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.PhiNode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.PhiNode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.Instructions.PhiNode.AddIncoming(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="srcBlock">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>srcBlock</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.Instructions.PhiNode.AddIncoming(System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock},System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock}[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock},System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock}[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="firstIncoming">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>firstIncoming</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock},System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock}[])</parameter>
          </include>
        </markup>
      </param>
      <param name="additionalIncoming">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>additionalIncoming</parameter>
            <parameter>M:Llvm.NET.Instructions.PhiNode.AddIncoming(System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock},System.Tuple{Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock}[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Llvm.NET.Instructions.PointerToInt">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.PointerToInt</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Resume">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Resume</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Return">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Return</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.ShuffleVector">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.ShuffleVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.SignExtend">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.SignExtend</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Store">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Store</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Instructions.Store.IsVolatile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Store.IsVolatile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Switch">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Switch</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.Instructions.Switch.AddCase(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Instructions.Switch.AddCase(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </summary>
      <param name="onVal">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>onVal</parameter>
            <parameter>M:Llvm.NET.Instructions.Switch.AddCase(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
      <param name="destination">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>destination</parameter>
            <parameter>M:Llvm.NET.Instructions.Switch.AddCase(Llvm.NET.Values.Value,Llvm.NET.Values.BasicBlock)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Llvm.NET.Instructions.Switch.Default">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Instructions.Switch.Default</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Terminator">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Terminator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Trunc">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Trunc</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.UnaryInstruction">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.UnaryInstruction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.Unreachable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.Unreachable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Instructions.ZeroExtend">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Instructions.ZeroExtend</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Types.IArrayType">
      <summary>Interface for an LLVM array type </summary>
    </member>
    <member name="P:Llvm.NET.Types.IArrayType.Length">
      <summary>Length of the array</summary>
    </member>
    <member name="T:Llvm.NET.Types.IFunctionType">
      <summary>Interface to repersent the LLVM type of a function (e.g. a signature)</summary>
    </member>
    <member name="P:Llvm.NET.Types.IFunctionType.IsVarArg">
      <summary>Flag to indicate if this signature is for a variadic function</summary>
    </member>
    <member name="P:Llvm.NET.Types.IFunctionType.ParameterTypes">
      <summary>Collection of types of the paramters for the function</summary>
    </member>
    <member name="P:Llvm.NET.Types.IFunctionType.ReturnType">
      <summary>Return type of the function</summary>
    </member>
    <member name="T:Llvm.NET.Types.IPointerType">
      <summary>Interface for a pointer type in LLVM</summary>
    </member>
    <member name="P:Llvm.NET.Types.IPointerType.AddressSpace">
      <summary>Address space the pointer referes to</summary>
    </member>
    <member name="T:Llvm.NET.Types.ISequenceType">
      <summary>Interface for an LLVM sequence type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ISequenceType.ElementType">
      <summary>Type of elements in the sequence</summary>
    </member>
    <member name="T:Llvm.NET.Types.IStructType">
      <summary>Interface for an LLVM structure type</summary>
    </member>
    <member name="P:Llvm.NET.Types.IStructType.IsOpaque">
      <summary>Indicates if the structure is opaque (e.g. has no body defined yet)</summary>
    </member>
    <member name="P:Llvm.NET.Types.IStructType.IsPacked">
      <summary>Indicates if the structure is packed (e.g. no automatic alignment padding between elements)</summary>
    </member>
    <member name="P:Llvm.NET.Types.IStructType.Members">
      <summary>List of types for all member elements of the structure</summary>
    </member>
    <member name="P:Llvm.NET.Types.IStructType.Name">
      <summary>Name of the structure</summary>
    </member>
    <member name="M:Llvm.NET.Types.IStructType.SetBody(System.Boolean,Llvm.NET.Types.ITypeRef[])">
      <summary>Sets the body of the structure</summary>
      <param name="packed">Flag to indicate if the body elements are packed (e.g. no padding)</param>
      <param name="elements">Optional types of each element</param>
    </member>
    <member name="T:Llvm.NET.Types.ITypeRef">
      <summary>Interface for a Type in LLVM</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.Context">
      <summary>Context that owns this type</summary>
    </member>
    <member name="M:Llvm.NET.Types.ITypeRef.CreateArrayType(System.UInt32)">
      <summary>Array type factory for an array with elements of this type</summary>
      <param name="count">Number of elements in the array</param>
      <returns>
        <see cref="T:Llvm.NET.Types.IArrayType" /> for the array</returns>
    </member>
    <member name="M:Llvm.NET.Types.ITypeRef.CreatePointerType">
      <summary>Get a <see cref="T:Llvm.NET.Types.IPointerType" /> for a type that points to elements of this type in the default (0) address space</summary>
      <returns>
        <see cref="T:Llvm.NET.Types.IPointerType" />corresponding to the type of a pointer that referns to elements of this type</returns>
    </member>
    <member name="M:Llvm.NET.Types.ITypeRef.CreatePointerType(System.UInt32)">
      <summary>Get a <see cref="T:Llvm.NET.Types.IPointerType" /> for a type that points to elements of this type in the specified address space</summary>
      <param name="addressSpace">Address space for the pointer</param>
      <returns>
        <see cref="T:Llvm.NET.Types.IPointerType" />corresponding to the type of a pointer that referns to elements of this type</returns>
    </member>
    <member name="M:Llvm.NET.Types.ITypeRef.GetNullValue">
      <summary>Gets a null value (e.g. all bits == 0 ) for the type</summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Types.ITypeRef.GetNullValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IntegerBitWidth">
      <summary>Integer bid width of this type or 0 for non integer types</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsDouble">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Types.ITypeRef.IsDouble</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsFloat">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Types.ITypeRef.IsFloat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsFloatingPoint">
      <summary>Flag to indicate if this type is a floating point type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsInteger">
      <summary>Flag to indicate if this type is an integer</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsPointer">
      <summary>Flag to indicate if this type is a pointer</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsPointerPointer">
      <summary>FLag to indicate if this type is a pointer to a pointer</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsSequence">
      <summary>Flag to indicate if this type is a sequence type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsSized">
      <summary>Flag to indicate if the type is sized</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsStruct">
      <summary>Flag to indicate if this type is a structure type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.IsVoid">
      <summary>Flag to indicate if this type represents the void type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.Kind">
      <summary>LLVM Type kind for this type</summary>
    </member>
    <member name="P:Llvm.NET.Types.ITypeRef.TypeHandle">
      <summary>LibLLVM handle for the type</summary>
    </member>
    <member name="T:Llvm.NET.Types.IVectorType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Types.IVectorType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Types.IVectorType.Size">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Types.IVectorType.Size</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.Argument">
      <summary>An LLVM Value representing an Argument to a function</summary>
    </member>
    <member name="M:Llvm.NET.Values.Argument.AddAttributes(Llvm.NET.Values.AttributeValue[])">
      <summary>Add a set of attributes using fluent style coding</summary>
      <param name="attributes">Attributes to add</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.Argument.AddAttributes(Llvm.NET.Values.AttributeValue[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.Argument.AddAttributes(System.Collections.Generic.IEnumerable{Llvm.NET.Values.AttributeValue})">
      <summary>Add a set of attributes using fluent style coding</summary>
      <param name="attributes">Attributes to add</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.Argument.AddAttributes(System.Collections.Generic.IEnumerable{Llvm.NET.Values.AttributeValue})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.Argument.Attributes">
      <summary>Attributes for this parameter</summary>
    </member>
    <member name="P:Llvm.NET.Values.Argument.ContainingFunction">
      <summary>Function this argument belongs to</summary>
    </member>
    <member name="P:Llvm.NET.Values.Argument.Index">
      <summary>Zero based index of the argument</summary>
    </member>
    <member name="M:Llvm.NET.Values.Argument.SetAlignment(System.UInt32)">
      <summary>Sets the alignment for the argument</summary>
      <param name="value">Alignment value for this argument</param>
    </member>
    <member name="T:Llvm.NET.Values.AsmDialect">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.AsmDialect</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:Llvm.NET.Values.AsmDialect.ATT"></member>
    <member name="F:Llvm.NET.Values.AsmDialect.Intel"></member>
    <member name="T:Llvm.NET.Values.AttributeValue">
      <summary>Single attribute for functions, function returns and function parameters</summary>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.#ctor(Llvm.NET.AttributeKind)">
      <summary>Creates a simple boolean attribute</summary>
      <param name="kind">Kind of attribute</param>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.#ctor(Llvm.NET.AttributeKind,System.UInt64)">
      <summary>Creates an attribute with an integer value parameter</summary>
      <param name="kind">The kind of attribute</param>
      <param name="value">Value for the attribute</param>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.#ctor(System.String)">
      <summary>Adds a valueless named attribute</summary>
      <param name="name">Attribute name</param>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.#ctor(System.String,System.String)">
      <summary>Adds a Target specific named attrinute with value</summary>
      <param name="name">Name of the attribute</param>
      <param name="value">Value of the attribute</param>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.IntegerValue">
      <summary>Integer value of the attrinute or null if the attribute doens't have a value</summary>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.IsEnum">
      <summary>Flag to indicate if this attribute is a simple enumeration value</summary>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.IsInt">
      <summary>Flag to indicate if this attribute has an integer attibrute</summary>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.IsString">
      <summary>Flag to indicate if this attribute is a target specific string value</summary>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.Kind">
      <summary>Kind of the attribute, or null for target specifc named attributes</summary>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.Name">
      <summary>Name of a named attribute or null for other kinds of attributes</summary>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.op_Implicit(Llvm.NET.AttributeKind)~Llvm.NET.Values.AttributeValue">
      <summary>Implicitly cast an <see cref="T:Llvm.NET.AttributeKind" /> to an <see cref="T:Llvm.NET.Values.AttributeValue" /></summary>
      <param name="kind">Kind of attrinute to create</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.AttributeValue.op_Implicit(Llvm.NET.AttributeKind)~Llvm.NET.Values.AttributeValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.AttributeValue.op_Implicit(System.String)~Llvm.NET.Values.AttributeValue">
      <summary>Implicitly cast a string to an named <see cref="T:Llvm.NET.Values.AttributeValue" /></summary>
      <param name="kind">Attribute name</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.AttributeValue.op_Implicit(System.String)~Llvm.NET.Values.AttributeValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.AttributeValue.StringValue">
      <summary>StringValue for named attributes with values</summary>
    </member>
    <member name="T:Llvm.NET.Values.BasicBlock">
      <summary>Provides aaccess to an LLVM Basic block</summary>
    </member>
    <member name="P:Llvm.NET.Values.BasicBlock.ContainingFunction">
      <summary>Function containing the block</summary>
    </member>
    <member name="P:Llvm.NET.Values.BasicBlock.FirstInstruction">
      <summary>First instruction in the block</summary>
    </member>
    <member name="M:Llvm.NET.Values.BasicBlock.GetNextInstruction(Llvm.NET.Instructions.Instruction)">
      <summary>Gets the instruction that follows a given instruction in a block</summary>
      <param name="instruction">instruction in the block to get the next instruction from</param>
      <returns>Next instruction or null if none</returns>
      <exception cref="T:System.ArgumentException">Thrown when <paramref cref="T:Llvm.NET.Instructions.Instruction" /> is from a different block</exception>
    </member>
    <member name="P:Llvm.NET.Values.BasicBlock.Instructions">
      <summary>Enumerable collection of all instructions in the block</summary>
    </member>
    <member name="P:Llvm.NET.Values.BasicBlock.LastInstruction">
      <summary>Last instruction in the block</summary>
    </member>
    <member name="P:Llvm.NET.Values.BasicBlock.Terminator">
      <summary>Terminator instruction for the block</summary>
    </member>
    <member name="T:Llvm.NET.Values.BlockAddress">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.BlockAddress</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.Constant">
      <summary>Contains an LLVM Constant value</summary>
    </member>
    <member name="M:Llvm.NET.Values.Constant.AllOnesValueFor(Llvm.NET.Types.ITypeRef)">
      <summary>Creates a constant instance of <paramref name="typeRef" /> with all bits in the instance set to 1</summary>
      <param name="typeRef">Type of value to create</param>
      <returns>Constant for the type with all instance bits set to 1</returns>
    </member>
    <member name="M:Llvm.NET.Values.Constant.ConstPointerToNullFor(Llvm.NET.Types.ITypeRef)">
      <summary>Create a constant NULL pointer for a given type</summary>
      <param name="typeRef">Type of pointer to create a null value for</param>
      <returns>Constnat NULL pointer of the specified type</returns>
    </member>
    <member name="P:Llvm.NET.Values.Constant.IsZeroValue">
      <summary>Indicates if the constant is a Zero value for the its type</summary>
    </member>
    <member name="M:Llvm.NET.Values.Constant.NullValueFor(Llvm.NET.Types.ITypeRef)">
      <summary>Create a NULL pointer for a given type</summary>
      <param name="typeRef">Type of pointer to create a null vale for</param>
      <returns>Constnat NULL pointer of the specified type</returns>
    </member>
    <member name="M:Llvm.NET.Values.Constant.UndefinedValueFor(Llvm.NET.Types.ITypeRef)">
      <summary>Creates an <see cref="T:Llvm.NET.Values.Constant" /> representing an undefined value for <paramref name="typeRef" /></summary>
      <param name="typeRef">Type to create the undefined value for</param>
      <returns>
        <see cref="T:Llvm.NET.Values.Constant" /> representing an undefined value of <paramref name="typeRef" /></returns>
    </member>
    <member name="T:Llvm.NET.Values.ConstantAggregateZero">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantAggregateZero</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantArray">
      <summary>LLVM Constant Array</summary>
    </member>
    <member name="M:Llvm.NET.Values.ConstantArray.From(Llvm.NET.Types.ITypeRef,Llvm.NET.Values.Constant[])">
      <summary>Create a constant array of values of a given type</summary>
      <param name="elementType">Type of elements in the array</param>
      <param name="values">Values to initialize the array</param>
      <returns>Constant representing the array</returns>
    </member>
    <member name="M:Llvm.NET.Values.ConstantArray.From(Llvm.NET.Types.ITypeRef,System.Collections.Generic.IEnumerable{Llvm.NET.Values.Constant})">
      <summary>Create a constant array of values of a given type</summary>
      <param name="elementType">Type of elements in the array</param>
      <param name="values">Values to initialize the array</param>
      <returns>Constant representing the array</returns>
    </member>
    <member name="T:Llvm.NET.Values.ConstantDataArray">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantDataArray</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantDataSequential">
      <summary>
            A vector or array constant whose element type is a simple 1/2/4/8-byte integer
            or float/double, and whose elements are just  simple data values
            (i.e. ConstantInt/ConstantFP).
            </summary>
    </member>
    <member name="M:Llvm.NET.Values.ConstantDataSequential.GetAsString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.ConstantDataSequential.GetAsString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ConstantDataSequential.GetAsString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.ConstantDataSequential.IsString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.ConstantDataSequential.IsString</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantDataVector">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantDataVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantExpression">
      <summary>While techincaly a type in LLVM ConstantExpression is primarily a static factory for Constants</summary>
    </member>
    <member name="M:Llvm.NET.Values.ConstantExpression.BitCast(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.BitCast(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.BitCast(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="toType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>toType</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.BitCast(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.BitCast(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.ConstantExpression.IntToPtrExpression(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.IntToPtrExpression(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.IntToPtrExpression(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.IntToPtrExpression(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ConstantExpression.IntToPtrExpression(Llvm.NET.Values.Constant,Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.ConstantExpression.Opcode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.ConstantExpression.Opcode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantFP">
      <summary>Floating point constant value in LLVM</summary>
    </member>
    <member name="M:Llvm.NET.Values.ConstantFP.GetValue(System.Boolean@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.ConstantFP.GetValue(System.Boolean@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="loosesInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>loosesInfo</parameter>
            <parameter>M:Llvm.NET.Values.ConstantFP.GetValue(System.Boolean@)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ConstantFP.GetValue(System.Boolean@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.ConstantFP.Value">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.ConstantFP.Value</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantInt">
      <summary>Represents an arbitrary bit width integer constant in LLVM</summary>
    </member>
    <member name="P:Llvm.NET.Values.ConstantInt.SignExtendedValue">
      <summary>Sign extends the value to a 64 bit value</summary>
    </member>
    <member name="P:Llvm.NET.Values.ConstantInt.ZeroExtendedValue">
      <summary>Retrieves the value of the constant zero extended to 64 bits</summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantPointerNull">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantPointerNull</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.Values.ConstantPointerNull.From(Llvm.NET.Types.ITypeRef)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.ConstantPointerNull.From(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:Llvm.NET.Values.ConstantPointerNull.From(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ConstantPointerNull.From(Llvm.NET.Types.ITypeRef)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.Values.ConstantStruct">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantStruct</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.ConstantVector">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.ConstantVector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.Function">
      <summary>LLVM Function definition</summary>
    </member>
    <member name="M:Llvm.NET.Values.Function.AddAttributes(Llvm.NET.Values.AttributeValue[])">
      <summary>Add a set of attributes using fluent style coding</summary>
      <param name="attributes">Attributes to add</param>
      <returns>This instance for use in fluent style code</returns>
    </member>
    <member name="M:Llvm.NET.Values.Function.AddAttributes(System.Collections.Generic.IEnumerable{Llvm.NET.Values.AttributeValue})">
      <summary>Add a set of attributes using fluent style coding</summary>
      <param name="attributes">Attributes to add</param>
      <returns>This instance for use in fluent style code</returns>
    </member>
    <member name="M:Llvm.NET.Values.Function.AppendBasicBlock(System.String)">
      <summary>Appends a new basic block to a function</summary>
      <param name="name">Name (label) of the block</param>
      <returns>
        <see cref="T:Llvm.NET.Values.BasicBlock" /> created and insterted onto the end of the function</returns>
    </member>
    <member name="M:Llvm.NET.Values.Function.AttributeHasValue(Llvm.NET.AttributeKind)">
      <summary>Determines if a given AttributeValue uses a parameter value</summary>
      <param name="kind">AttributeValue kind to test</param>
      <returns>true if the AttributeValue has a parameter</returns>
    </member>
    <member name="P:Llvm.NET.Values.Function.Attributes">
      <summary>Gets the <see cref="T:Llvm.NET.Values.IAttributeSet" /> for this function itself</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.BasicBlocks">
      <summary>Basic Blocks for the function</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.CallingConvention">
      <summary>Calling convention for the method</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.DISubProgram">
      <summary>Debug information for this function</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.EntryBlock">
      <summary>Entry block for this function</summary>
    </member>
    <member name="M:Llvm.NET.Values.Function.FindOrCreateNamedBlock(System.String)">
      <summary>Retrieves or creates  block by name</summary>
      <param name="name">Block name (label) to look for or create</param>
      <returns>
        <see cref="T:Llvm.NET.Values.BasicBlock" /> If the block was created it is appended to the end of function</returns>
    </member>
    <member name="P:Llvm.NET.Values.Function.GcName">
      <summary>Garbage collection engine name that this function is generated to work with</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.IntrinsicId">
      <summary>LLVM instrinsicID for the method</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.IsVarArg">
      <summary>Flag to indicate if the method signature accepts variable arguments</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.Parameters">
      <summary>Parameters for the function including any method definition specific attributes (i.e. ByVal)</summary>
    </member>
    <member name="M:Llvm.NET.Values.Function.PrependBasicBlock(System.String)">
      <summary>Add a new basic block to the beginning of a function</summary>
      <param name="name">Name (label) for the block</param>
      <returns>
        <see cref="T:Llvm.NET.Values.BasicBlock" /> created and insterted into the begining function</returns>
    </member>
    <member name="P:Llvm.NET.Values.Function.ReturnAttributes">
      <summary>Gets the <see cref="T:Llvm.NET.Values.IAttributeSet" /> for the return value of this function</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.ReturnType">
      <summary>Return type of the function</summary>
    </member>
    <member name="P:Llvm.NET.Values.Function.Signature">
      <summary>Signature type of the function</summary>
    </member>
    <member name="M:Llvm.NET.Values.Function.Verify">
      <summary>Verifies the function is valid and all blocks properly terminated</summary>
    </member>
    <member name="T:Llvm.NET.Values.GlobalAlias">
      <summary>LLVM Global Alias for a function or global value</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalAlias.Aliasee">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.GlobalAlias.Aliasee</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.GlobalObject">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.GlobalObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalObject.Alignment">
      <summary>Alignment requirements for this object</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalObject.Section">
      <summary>Linker section this object belongs to</summary>
    </member>
    <member name="T:Llvm.NET.Values.GlobalValue">
      <summary>LLVM Global value </summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalValue.IsDeclaration">
      <summary>Flag to indicate if this is a declaration</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalValue.Linkage">
      <summary>Linkage specification for this symbol</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalValue.ParentModule">
      <summary>Module containing this global value</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalValue.UnnamedAddress">
      <summary>Flag to indicate if this is an Unnamed address</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalValue.Visibility">
      <summary>Visibility of this global value</summary>
    </member>
    <member name="T:Llvm.NET.Values.GlobalValueExtensions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.GlobalValueExtensions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.Values.GlobalValueExtensions.Linkage``1(``0,Llvm.NET.Linkage)">
      <summary>Linkage specification for this symbol</summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Linkage``1(``0,Llvm.NET.Linkage)</parameter>
          </include>
        </markup>
      </param>
      <param name="linkage">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>linkage</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Linkage``1(``0,Llvm.NET.Linkage)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Linkage``1(``0,Llvm.NET.Linkage)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Linkage``1(``0,Llvm.NET.Linkage)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.GlobalValueExtensions.Visibility``1(``0,Llvm.NET.Visibility)">
      <summary>Visibility of this global value</summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Visibility``1(``0,Llvm.NET.Visibility)</parameter>
          </include>
        </markup>
      </param>
      <param name="visibility">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>visibility</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Visibility``1(``0,Llvm.NET.Visibility)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Visibility``1(``0,Llvm.NET.Visibility)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.GlobalValueExtensions.Visibility``1(``0,Llvm.NET.Visibility)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Llvm.NET.Values.GlobalVariable">
      <summary>An LLVM Global Variable</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalVariable.Initializer">
      <summary>Initial value for the variable</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalVariable.IsConstant">
      <summary>Gets or sets if this global is a Constant</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalVariable.IsExternallyInitialized">
      <summary>Flag to indicate if this variable is initialized in an external module</summary>
    </member>
    <member name="P:Llvm.NET.Values.GlobalVariable.IsThreadLocal">
      <summary>Flag to indicate if this global is stored per thread</summary>
    </member>
    <member name="M:Llvm.NET.Values.GlobalVariable.RemoveFromParent">
      <summary>Removes the value from its parent module, but does not delete it</summary>
    </member>
    <member name="T:Llvm.NET.Values.IAttributeSet">
      <summary>Interface for a set of attributes on a Function, Function return or parameter</summary>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Add(Llvm.NET.Values.AttributeValue)">
      <summary>Adds a single boolean attribute</summary>
      <param name="kind">AttributeValue kind to add</param>
      <returns>This instance for use in fluent style coding</returns>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Add(Llvm.NET.Values.AttributeValue[])">
      <summary>Adds a set of boolean attributes to the function itself</summary>
      <param name="attributes">Attributes to add</param>
      <returns>This instance for use in fluent style coding</returns>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Add(System.Collections.Generic.IEnumerable{Llvm.NET.Values.AttributeValue})">
      <summary>Add a collection of attributes to the function itself</summary>
      <param name="attributes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>attributes</parameter>
            <parameter>M:Llvm.NET.Values.IAttributeSet.Add(System.Collections.Generic.IEnumerable{Llvm.NET.Values.AttributeValue})</parameter>
          </include>
        </markup>
      </param>
      <returns>This instance for use in fluent style coding</returns>
    </member>
    <member name="P:Llvm.NET.Values.IAttributeSet.DereferenceableBytes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.IAttributeSet.DereferenceableBytes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Values.IAttributeSet.DereferenceableOrNullBytes">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.IAttributeSet.DereferenceableOrNullBytes</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Has(Llvm.NET.AttributeKind)">
      <summary>Tests if this attribute set has a given AttributeValue kind</summary>
      <param name="kind">Kind of AttributeValue to test for</param>
      <returns>true if the AttributeValue esists or false if not</returns>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Has(System.String)">
      <summary>Tests if this attribute set has a given string attribute</summary>
      <param name="name">Name of the attribute to test for</param>
      <returns>true if the attribute exists or false if not</returns>
    </member>
    <member name="P:Llvm.NET.Values.IAttributeSet.ParamAlignment">
      <summary>Parameter alignement (only valid on parameters)</summary>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Remove(Llvm.NET.AttributeKind)">
      <summary>Removes the specified attribute from the attribute set</summary>
      <param name="kind">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>kind</parameter>
            <parameter>M:Llvm.NET.Values.IAttributeSet.Remove(Llvm.NET.AttributeKind)</parameter>
          </include>
        </markup>
      </param>
      <returns>This instance for use in fluent style coding</returns>
    </member>
    <member name="M:Llvm.NET.Values.IAttributeSet.Remove(System.String)">
      <summary>Remove a target specific attribute</summary>
      <param name="name">Name of the attribute</param>
      <returns>This instance for use in fluent style coding</returns>
    </member>
    <member name="P:Llvm.NET.Values.IAttributeSet.StackAlignment">
      <summary>Stack alignment requiirements for this function if not the same as the ABI</summary>
    </member>
    <member name="T:Llvm.NET.Values.InlineAsm">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.InlineAsm</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.UndefValue">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Llvm.NET.Values.UndefValue</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.Use">
      <summary>LLVM Use, which is essentially a tuple of the <see cref="P:Llvm.NET.Values.Use.User" /> and the <see cref="P:Llvm.NET.Values.Use.Value" /> used</summary>
    </member>
    <member name="P:Llvm.NET.Values.Use.User">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.Use.User</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Values.Use.Value">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.Use.Value</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Llvm.NET.Values.User">
      <summary>Contains an LLVM User value</summary>
    </member>
    <member name="P:Llvm.NET.Values.User.Operands">
      <summary>Collection of operands</summary>
    </member>
    <member name="P:Llvm.NET.Values.User.Uses">
      <summary>Enumerable collection of <see cref="T:Llvm.NET.Values.Use" />s</summary>
    </member>
    <member name="T:Llvm.NET.Values.Value">
      <summary>LLVM Value</summary>
    </member>
    <member name="M:Llvm.NET.Values.Value.AddExtendedPropertyValue(System.String,System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.Value.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Llvm.NET.Values.Value.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.Value.AddExtendedPropertyValue(System.String,System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Llvm.NET.Values.Value.Context">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Llvm.NET.Values.Value.Context</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Llvm.NET.Values.Value.IsNull">
      <summary>Determines if the Value represents the NULL value for the values type</summary>
    </member>
    <member name="P:Llvm.NET.Values.Value.IsUndefined">
      <summary>Indicates if this value is Undefined</summary>
    </member>
    <member name="P:Llvm.NET.Values.Value.Name">
      <summary>Name of the value (if any)</summary>
    </member>
    <member name="M:Llvm.NET.Values.Value.ReplaceAllUsesWith(Llvm.NET.Values.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.Value.ReplaceAllUsesWith(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:Llvm.NET.Values.Value.ReplaceAllUsesWith(Llvm.NET.Values.Value)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Llvm.NET.Values.Value.ToString">
      <summary>Generates a string representing the LLVM syntax of the value</summary>
      <returns>string version of the value formatted by LLVM</returns>
    </member>
    <member name="M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="id">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>id</parameter>
            <parameter>M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.Value.TryGetExtendedPropertyValue``1(System.String,``0@)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Llvm.NET.Values.Value.Type">
      <summary>Type of the value</summary>
    </member>
    <member name="T:Llvm.NET.Values.ValueExtensions">
      <summary>Provides extension methods to <see cref="T:Llvm.NET.Values.Value" /> that cannot be achieved as members of the class</summary>
    </member>
    <member name="M:Llvm.NET.Values.ValueExtensions.RegisterName``1(``0,System.String)">
      <summary>Sets the virtual register name for a value</summary>
      <param name="value">Value to set register name for</param>
      <param name="name">Name for the virtual register the value represents</param>
      <typeparam name="T"> Type of the value to set the name for</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ValueExtensions.RegisterName``1(``0,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.ValueExtensions.SetDebugLocation``1(``0,Llvm.NET.DebugInfo.DILocation)">
      <summary>Sets the debugging location for a value</summary>
      <param name="value">Value to set debug location for</param>
      <param name="location">Debug location information</param>
      <typeparam name="T"> Type of the value to tag</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ValueExtensions.SetDebugLocation``1(``0,Llvm.NET.DebugInfo.DILocation)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Llvm.NET.Values.ValueExtensions.SetDebugLocation``1(``0,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DIScope)">
      <summary>Sets the debugging location for a value</summary>
      <param name="value">Value to set debug location for</param>
      <param name="line">Line number</param>
      <param name="column">Column number</param>
      <param name="scope">Scope for the value</param>
      <typeparam name="T"> Type of the value to tag</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Llvm.NET.Values.ValueExtensions.SetDebugLocation``1(``0,System.UInt32,System.UInt32,Llvm.NET.DebugInfo.DIScope)</parameter>
          </include>
        </markup>
      </returns>
    </member>
  </members>
</doc>