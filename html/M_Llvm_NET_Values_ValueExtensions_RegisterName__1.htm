<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ValueExtensions.RegisterName(T) Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="RegisterName%3CT%3E method" /><meta name="System.Keywords" content="RegisterName(Of T) method" /><meta name="System.Keywords" content="ValueExtensions.RegisterName%3CT%3E method" /><meta name="System.Keywords" content="ValueExtensions.RegisterName(Of T) method" /><meta name="Microsoft.Help.F1" content="Llvm.NET.Values.ValueExtensions.RegisterName``1" /><meta name="Microsoft.Help.Id" content="M:Llvm.NET.Values.ValueExtensions.RegisterName``1(``0,System.String)" /><meta name="Description" content="Sets the virtual register name for a value" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Llvm.NET.Values" /><meta name="file" content="M_Llvm_NET_Values_ValueExtensions_RegisterName__1" /><meta name="guid" content="M_Llvm_NET_Values_ValueExtensions_RegisterName__1" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Llvm.NET interop wrapper library<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="47ec5af0-5c1c-443e-b2b3-158a100dc594.htm" title="Llvm.NET interop wrapper library" tocid="roottoc">Llvm.NET interop wrapper library</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="R_Project_Llvm_NET.htm" title="Namespaces" tocid="R_Project_Llvm_NET">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Llvm_NET_Values.htm" title="Llvm.NET.Values" tocid="N_Llvm_NET_Values">Llvm.NET.Values</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Llvm_NET_Values_ValueExtensions.htm" title="ValueExtensions Class" tocid="T_Llvm_NET_Values_ValueExtensions">ValueExtensions Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="Methods_T_Llvm_NET_Values_ValueExtensions.htm" title="ValueExtensions Methods" tocid="Methods_T_Llvm_NET_Values_ValueExtensions">ValueExtensions Methods</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="M_Llvm_NET_Values_ValueExtensions_RegisterName__1.htm" title="RegisterName(T) Method " tocid="M_Llvm_NET_Values_ValueExtensions_RegisterName__1">RegisterName(T) Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Llvm_NET_Values_ValueExtensions_SetDebugLocation__1.htm" title="SetDebugLocation(T) Method " tocid="M_Llvm_NET_Values_ValueExtensions_SetDebugLocation__1">SetDebugLocation(T) Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="Llvm.NET Logo" src="../icons/LlvmNetSmall.png" /></td><td class="titleColumn">ValueExtensions<span id="LSTCD600715_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCD600715_0?cpp=::|nu=.");</script>RegisterName<span id="LSTCD600715_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCD600715_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">T</span><span id="LSTCD600715_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCD600715_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Method </td></tr></table><span class="introStyle"></span><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary">Sets the virtual register name for a value</div><p> </p><strong>Namespace:</strong> <a href="N_Llvm_NET_Values.htm">Llvm.NET.Values</a><br /><strong>Assembly:</strong> Llvm.NET (in Llvm.NET.dll) Version: 1.0.5755<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="identifier">RegisterName</span>&lt;T&gt;(
	<span class="keyword">this</span> T <span class="parameter">value</span>,
	<span class="identifier">string</span> <span class="parameter">name</span>
)
<span class="keyword">where</span> T : <span class="identifier">Value</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">value</span></dt><dd>Type: <span class="selflink"><span class="typeparameter">T</span></span><br />Value to set register name for</dd><dt><span class="parameter">name</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LSTCD600715_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCD600715_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />Name for the virtual register the value represents</dd></dl><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">T</span></dt><dd> Type of the value to set the name for</dd></dl><h4 class="subHeading">Return Value</h4>Type: <span class="selflink"><span class="typeparameter">T</span></span><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;returns&gt; documentation for "M:Llvm.NET.Values.ValueExtensions.RegisterName``1(``0,System.String)"]</p><h4 class="subHeading">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type . When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="http://msdn.microsoft.com/en-us/library/bb384936.aspx" target="_blank">Extension Methods (Visual Basic)</a> or <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx" target="_blank">Extension Methods (C# Programming Guide)</a>.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection"><p>Technically speaking only an <a href="T_Llvm_NET_Instructions_Instruction.htm">Instruction</a> can have register name
            information. However, since LLVM will perform constant folding in the <a href="T_Llvm_NET_InstructionBuilder.htm">InstructionBuilder</a>
            it almost all of the methods in <a href="T_Llvm_NET_InstructionBuilder.htm">InstructionBuilder</a> return a <a href="T_Llvm_NET_Values_Value.htm">Value</a> rather
            than an more specific <a href="T_Llvm_NET_Instructions_Instruction.htm">Instruction</a>. Thus, without this extension method here,
            code would need to know ahead of time that an actual instruction would be produced then cast the result
            to an <a href="T_Llvm_NET_Instructions_Instruction.htm">Instruction</a> and then set the debug location. This makes the code rather
            ugly and tedious to manage. Placing this as a generic extension method ensures that the return type matches
            the original and no additional casting is needed, which would defeat the purpose of doing this. For
             <a href="T_Llvm_NET_Values_Value.htm">Value</a> types that are not instructions this does nothing. This allows for a simpler fluent
            style of programming where the actual type is retained even in cases where an <a href="T_Llvm_NET_InstructionBuilder.htm">InstructionBuilder</a>
            method will always return an atual instruction.</p><p>Since the <a href="P_Llvm_NET_Values_Value_Name.htm">Name</a> property is available on all <a href="T_Llvm_NET_Values_Value.htm">Value</a>s this is slightly
            redundant. It is useful for maintining the fluent style of coding along with expressing intent more clearly.
            (e.g. using this makes it expressly clear that the intent is to set the virtual register name and not the
            name of a local variable etc...) Using the fluent style allows a 50% reduction in the number of overloaded
            methods in <a href="T_Llvm_NET_InstructionBuilder.htm">InstructionBuilder</a> to account for all variations with or without a name.
            </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Llvm_NET_Values_ValueExtensions.htm">ValueExtensions Class</a></div><div class="seeAlsoStyle"><a href="N_Llvm_NET_Values.htm">Llvm.NET.Values Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>