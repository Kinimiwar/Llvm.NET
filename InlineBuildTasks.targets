<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
    In-line task to parse the Full version number generated by VsoUpdateVersion.ps1.
    The full version is a string used in labeling the build for VSO, and for naming
    the final NUGET package.
    -->
    <UsingTask TaskName="ParseBuildVersion"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <FullBuildNumber ParameterType="System.String" Required="true"/>
            <BuildMajor ParameterType="System.UInt16" Output="true"/>
            <BuildMinor ParameterType="System.UInt16" Output="true"/>
            <BuildNumber ParameterType="System.UInt16" Output="true"/>
            <BuildRevision ParameterType="System.UInt16" Output="true"/>
            <BuildSuffix ParameterType="System.String" Output="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var buildParts = FullBuildNumber.Split( '.','-');
                try
                {
                    BuildMajor = UInt16.Parse( buildParts[ 0 ] );
                    BuildMinor = UInt16.Parse( buildParts[ 1 ] );
                    BuildNumber = UInt16.Parse( buildParts[ 2 ] );
                    BuildRevision = UInt16.Parse( buildParts[ 3 ] );
                    if( buildParts.Length > 4 )
                       BuildSuffix = FullBuildNumber.Substring( FullBuildNumber.IndexOf( '-' ) );
                    else
                       BuildSuffix = string.Empty;
                    
                    var msg = string.Format( "FullVersion: {0}.{1}.{2}.{3}{4}", BuildMajor, BuildMinor, BuildNumber, BuildRevision, BuildSuffix );
                    Log.LogMessage( msg, MessageImportance.High );
                }
                catch
                {
                    Log.LogError( "Invalid build version number format. Expected: MMMM.mmmm.nnnn.rrrr[-*]");
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="DownloadFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <SourceUrl ParameterType="System.String" Required="true"/>
            <DestinationPath ParameterType="System.String" Required="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Net"/>
            <Code Type="Fragment" Language="cs">
             <![CDATA[
              var client = new WebClient();
              client.DownloadFile( SourceUrl, DestinationPath );
              ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="FilterReleaseProjects"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <Projects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <ReleaseProjects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Net"/>
            <Code Type="Fragment" Language="cs">
              <![CDATA[
              ReleaseProjects = ( from item in Projects
                                  where item.GetMetadata("Configuration") == "Release"
                                  select item
                                ).ToArray();
              ]]>
            </Code>
        </Task>
    </UsingTask>
    
    <!--
    In-line task to set the buildNumber for use in creating an MSBuild property
    to use in generating version info source files for the build.
    
    For details on the general algorithm used for computing the numbers here see:
    https://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.assemblyversionattribute(v=vs.140).aspx 
    -->
    <UsingTask TaskName="GenerateBuildNumbers"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <BuildNumber ParameterType="System.UInt16" Output="true"/>
            <BuildRevision ParameterType="System.UInt16" Output="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var now = DateTime.Now;
                var midnightTodayUtc = new DateTime( now.Year, now.Month, now.Day, 0, 0, 0, DateTimeKind.Utc);
                var baseDate = new DateTime(2000, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                BuildNumber = (ushort)(now  - baseDate).Days;
                BuildRevision = (ushort)(((now - midnightTodayUtc).TotalSeconds) / 2);
            ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>